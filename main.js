/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// i18n.ts
var i18n_exports = {};
__export(i18n_exports, {
  getCurrentLocale: () => getCurrentLocale,
  resolveLocale: () => resolveLocale,
  setLocale: () => setLocale,
  t: () => t
});
function resolveLocale(locale) {
  if (!locale || locale === "auto") {
    try {
      const lang = (navigator.language || "").toLowerCase();
      return lang.startsWith("zh") ? "zh" : "en";
    } catch (_) {
      return "en";
    }
  }
  return locale;
}
function setLocale(locale) {
  currentLocale = resolveLocale(locale);
}
function getCurrentLocale() {
  return currentLocale;
}
function formatVars(input, vars) {
  if (!vars)
    return input;
  return input.replace(/\{(\w+)\}/g, (_m, k) => {
    var _a;
    return String((_a = vars[k]) != null ? _a : "");
  });
}
function t(key, vars, locale) {
  var _a, _b;
  const lang = locale || currentLocale;
  const entry = dict[key];
  if (!entry)
    return key;
  const raw = (_b = (_a = entry[lang]) != null ? _a : entry.en) != null ? _b : key;
  return formatVars(raw, vars);
}
var currentLocale, dict;
var init_i18n = __esm({
  "i18n.ts"() {
    currentLocale = "zh";
    dict = {
      // Currency
      "currency.symbol": { zh: "\xA5", en: "$" },
      // Common
      "common.confirm": { zh: "\u786E\u5B9A", en: "Confirm" },
      "common.cancel": { zh: "\u53D6\u6D88", en: "Cancel" },
      "common.delete": { zh: "\u5220\u9664", en: "Delete" },
      "common.save": { zh: "\u4FDD\u5B58", en: "Save" },
      "common.back": { zh: "\u8FD4\u56DE", en: "Back" },
      "common.add": { zh: "\u6DFB\u52A0", en: "Add" },
      "common.search": { zh: "\u641C\u7D22", en: "Search" },
      // Menu / Command
      "menu.openWith": { zh: "\u7528 LaC.CostSet \u6253\u5F00", en: "Open with LaC.CostSet" },
      "command.open": { zh: "\u6253\u5F00", en: "Open" },
      "notice.invalidEntry": {
        zh: '\u5165\u53E3\u6587\u4EF6\u5185\u5BB9\u683C\u5F0F\u4E0D\u6B63\u786E\uFF1A\u9700\u4E3A TOML\uFF0C\u4E14 type = "root"\uFF0Crenders \u5FC5\u987B\u5305\u542B "costset"',
        en: 'Entry file invalid: must be TOML with type = "root" and renders must include "costset"'
      },
      "notice.saveFailed": { zh: "\u4FDD\u5B58\u5931\u8D25: {msg}", en: "Save failed: {msg}" },
      // Settings
      "settings.title": { zh: "LaC.CostSet \u8BBE\u7F6E", en: "LaC.CostSet Settings" },
      "settings.guide.1": {
        zh: "\u91CD\u8981\uFF1A\u5165\u53E3\u6587\u4EF6\u4E0E\u8D44\u4EA7\u6587\u4EF6\u7684\u201C\u5185\u5BB9\u683C\u5F0F\u4E3A TOML\u201D\uFF0C\u6587\u4EF6\u6269\u5C55\u540D\u53EF\u4E3A .md\u3002\u5141\u8BB8 # \u5F00\u5934\u7684\u6CE8\u91CA\u3002\u552F\u4E00\u7684\u975E TOML \u4F8B\u5916\u662F\uFF1A\u6587\u4EF6\u6B63\u6587\u4E2D\u7684 [[\u8D44\u4EA7\u6587\u4EF6\u540D]] \u53CC\u94FE\u53EF\u7701\u7565\u5F15\u53F7\uFF0C\u63D2\u4EF6\u5728\u89E3\u6790\u65F6\u4F1A\u4E34\u65F6\u4E3A\u5176\u52A0\u4E0A\u5F15\u53F7\u540E\u6309 TOML \u5904\u7406\u3002\u9664\u8FD9\u70B9\u5916\uFF0C\u4E0D\u5E94\u6DF7\u5165\u666E\u901A Markdown \u6587\u672C\u3002",
        en: "Important: Entry and asset files must be TOML content (extension can be .md). Comments starting with # are allowed. The only non-TOML exception: [[asset filename]] wikilinks in the body can omit quotes; the plugin will temporarily quote them for TOML parsing. No other regular Markdown should be mixed."
      },
      "settings.entry.example": {
        zh: '# \u5165\u53E3\u6587\u4EF6\u6700\u5C0F\u793A\u4F8B\n\n# \u9876\u90E8 TOML\uFF1A\u5FC5\u987B\u6EE1\u8DB3\n# type = "root"\n# renders = ["costset"]\n\ntype = "root"\nrenders = ["costset"]\n\n# \u6B63\u6587\uFF1A\u7528\u53CC\u94FE\u5217\u51FA\u8D44\u4EA7\u6587\u4EF6\u540D\uFF08\u4E0D\u9700\u8981\u6269\u5C55\u540D\uFF09\n\n[[\u952E\u76D8]]\n[[\u8033\u673A]]\n',
        en: '# Minimal entry file example\n\n# Top TOML must include\n# type = "root"\n# renders = ["costset"]\n\ntype = "root"\nrenders = ["costset"]\n\n# Body: list asset filenames using wikilinks (no extension)\n\n[[keyboard]]\n[[headphones]]\n'
      },
      "settings.asset.desc": {
        zh: "\u8D44\u4EA7\u6587\u4EF6\u540C\u6837\u662F Markdown\uFF0C\u4F46\u5185\u5BB9\u4EE5 TOML \u5B57\u6BB5\u4E3A\u4E3B\uFF08\u63D2\u4EF6\u4F1A\u4FDD\u7559\u4F60\u5199\u7684\u6CE8\u91CA\uFF09\u3002\u4EE5\u4E0B\u4E3A\u6700\u5C0F\u793A\u4F8B\uFF1A",
        en: "Asset files are also Markdown, but mainly TOML fields (comments are preserved). Minimal example:"
      },
      "settings.asset.example": {
        zh: 'name = "\u952E\u76D8"\n\n[style]\nicon = "\u2328\uFE0F"\n\n[detail]\nprice = 399\nactive_from = "2024-01-01"\nactive_to = ""\nrecycle_price = 0\ntags = ["\u6570\u7801", "\u952E\u76D8"]\n',
        en: 'name = "Keyboard"\n\n[style]\nicon = "\u2328\uFE0F"\n\n[detail]\nprice = 399\nactive_from = "2024-01-01"\nactive_to = ""\nrecycle_price = 0\ntags = ["Digital", "Keyboard"]\n'
      },
      "settings.usage": {
        zh: "\u7528\u6CD5\uFF1A\u5728\u201C\u5165\u53E3\u6587\u4EF6\u201D\u4E0A\u53F3\u952E \u2192 \u9009\u62E9\u201C\u7528 LaC.CostSet \u6253\u5F00\u201D\u3002\u4E5F\u53EF\u5728\u547D\u4EE4\u9762\u677F\u6267\u884C\u201C\u6253\u5F00LaC.CostSet\u201D\uFF08\u5C06\u4F7F\u7528\u4E0B\u65B9\u914D\u7F6E\u7684\u5165\u53E3\u6587\u4EF6\uFF09\u3002",
        en: 'Usage: Right-click on the entry file \u2192 choose "Open with LaC.CostSet". Or run the command "Open LaC.CostSet" (uses the configured entry file below).'
      },
      "settings.entryFile.name": { zh: "\u5165\u53E3\u6587\u4EF6", en: "Entry file" },
      "settings.entryFile.desc": { zh: "\u4F5C\u4E3A\u8D44\u4EA7\u5165\u53E3\u7684 Markdown \u6587\u4EF6\u8DEF\u5F84\uFF0C\u4F8B\u5982 LaC/CostSet/costset.md", en: "Path to the Markdown entry file, e.g., LaC/CostSet/costset.md" },
      "settings.contextMenu.name": { zh: "\u542F\u7528\u53F3\u952E\u83DC\u5355 \u201C\u7528 LaC.CostSet \u6253\u5F00\u201D", en: 'Enable context menu "Open with LaC.CostSet"' },
      "settings.contextMenu.desc": { zh: "\u5728 Markdown \u6587\u4EF6\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u663E\u793A\u5165\u53E3", en: "Show entry in Markdown file context menu" },
      "settings.defaultSort.name": { zh: "\u9ED8\u8BA4\u6392\u5E8F", en: "Default sort" },
      "settings.defaultSort.desc": { zh: "\u6253\u5F00\u89C6\u56FE\u65F6\u7684\u521D\u59CB\u6392\u5E8F\u65B9\u5F0F", en: "Initial sort when opening the view" },
      "settings.defaultSort.option.none": { zh: "\u6587\u672C\u987A\u5E8F", en: "Text order" },
      "settings.defaultSort.option.dailyDesc": { zh: "\u65E5\u5747\u4EF7\u683C", en: "Daily cost" },
      "settings.defaultSort.option.priceDesc": { zh: "\u4EF7\u683C", en: "Price" },
      "settings.defaultSort.option.dateDesc": { zh: "\u8D2D\u5165\u65E5\u671F", en: "Purchase date" },
      "settings.defaultIcon.name": { zh: "\u9ED8\u8BA4\u56FE\u6807", en: "Default icon" },
      "settings.defaultIcon.desc": { zh: "\u65B0\u8D44\u4EA7\u7684\u9ED8\u8BA4\u56FE\u6807\uFF0C\u4EC5\u652F\u6301 1 \u4E2A Emoji", en: "Default icon for new assets (single Emoji only)" },
      "settings.defaultIcon.placeholder": { zh: "\u{1F4E6}", en: "\u{1F4E6}" },
      "settings.locale.name": { zh: "\u8BED\u8A00", en: "Language" },
      "settings.locale.desc": { zh: "\u754C\u9762\u8BED\u8A00", en: "Interface language" },
      "settings.locale.option.auto": { zh: "\u8DDF\u968F\u7CFB\u7EDF", en: "Auto" },
      "settings.locale.option.zh": { zh: "\u4E2D\u6587", en: "Chinese" },
      "settings.locale.option.en": { zh: "\u82F1\u6587", en: "English" },
      // AssetManagerView
      "view.hint.openFromMenu": { zh: "\u4ECE\u6587\u4EF6\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u9009\u62E9 \u201C\u7528 LaC.CostSet \u6253\u5F00\u201D\u3002", en: 'Use file context menu: "Open with LaC.CostSet".' },
      "view.selectRoot.title": { zh: "\u9009\u62E9\u8D44\u4EA7\u6839\u6587\u4EF6", en: "Select root asset file" },
      "view.selectRoot.desc": { zh: "\u8BF7\u9009\u62E9\u4E00\u4E2A\u5305\u542B\u8D44\u4EA7\u5F15\u7528\u7684\u6587\u4EF6\u4F5C\u4E3A\u5165\u53E3", en: "Please choose a file containing asset references as entry" },
      "view.empty": { zh: "\u6682\u65E0\u8D44\u4EA7", en: "No assets" },
      "view.toNow": { zh: "\u81F3\u4ECA", en: "Present" },
      "view.usedDays": { zh: "\u5DF2\u7528{days}\u5929", en: "{days} days used" },
      "view.daily": { zh: "\u65E5\u5747", en: "Daily" },
      "view.price": { zh: "\u4EF7\u683C", en: "Price" },
      "view.recyclePrice": { zh: "\u56DE\u6536\u4EF7", en: "Recycle" },
      "view.back": { zh: "\u8FD4\u56DE", en: "Back" },
      "view.search.aria": { zh: "\u641C\u7D22", en: "Search" },
      "view.search.placeholder": { zh: "\u641C\u7D22\u540D\u79F0\u6216\u6807\u7B7E", en: "Search name or tags" },
      "view.sort.title": { zh: "\u6392\u5E8F", en: "Sort" },
      "view.sort.title.dailyDesc": { zh: "\u6309\u65E5\u5747\u6210\u672C (\u964D\u5E8F)", en: "By daily cost (desc)" },
      "view.sort.title.priceDesc": { zh: "\u6309\u4EF7\u683C (\u964D\u5E8F)", en: "By price (desc)" },
      "view.sort.title.dateDesc": { zh: "\u6309\u8D2D\u5165\u65E5\u671F (\u964D\u5E8F)", en: "By purchase date (desc)" },
      "view.sort.menu.dailyDesc": { zh: "\u6309\u65E5\u5747\u6210\u672C", en: "By daily cost" },
      "view.sort.menu.priceDesc": { zh: "\u6309\u4EF7\u683C", en: "By price" },
      "view.sort.menu.dateDesc": { zh: "\u6309\u8D2D\u5165\u65E5\u671F", en: "By purchase date" },
      "view.add": { zh: "\u6DFB\u52A0", en: "Add" },
      "view.confirmDeleteAsset": { zh: '\u786E\u5B9A\u8981\u5220\u9664\u8D44\u4EA7 "{name}" \u5417\uFF1F', en: 'Delete asset "{name}"?' },
      // Top summary
      "top.total": { zh: "\u603B\u6210\u672C ", en: "Total " },
      "top.recycle": { zh: "\u53EF\u56DE\u6536 ", en: "Recyclable " },
      "date.pick": { zh: "\u9009\u62E9\u65E5\u671F", en: "Pick date" },
      "date.year": { zh: "\u5E74", en: "" },
      "date.month": { zh: "\u6708", en: "" },
      "date.day": { zh: "\u65E5", en: "" },
      // Confirm modal
      "confirm.title": { zh: "\u786E\u8BA4\u64CD\u4F5C", en: "Confirm" },
      // Form modal
      "form.name": { zh: "\u540D\u79F0", en: "Name" },
      "form.icon": { zh: "\u56FE\u6807", en: "Icon" },
      "form.price": { zh: "\u4EF7\u683C", en: "Price" },
      "form.purchaseOn": { zh: "\u8D2D\u5165\u4E8E", en: "Purchased on" },
      "form.purchaseDate": { zh: "\u8D2D\u5165\u65E5\u671F", en: "Purchase date" },
      "form.endDate": { zh: "\u5230\u671F", en: "End date" },
      "form.endDatePlaceholder": { zh: "(\u8BA1\u5212)\u62A5\u5E9F/\u56DE\u6536/\u5230\u671F\u65F6\u95F4", en: "Planned scrap/recycle/end date" },
      "form.recyclePrice": { zh: "\u56DE\u6536\u4EF7", en: "Recycle price" },
      "form.tags": { zh: "\u6807\u7B7E", en: "Tags" },
      "form.assetName.placeholder": { zh: "\u8D44\u4EA7\u540D\u79F0", en: "Asset name" },
      "form.icon.placeholder": { zh: "\u8BF7\u8F93\u5165\u4E00\u4E2A Emoji \u4F5C\u4E3A\u56FE\u6807", en: "Please enter one Emoji as icon" },
      "form.price.placeholder": { zh: "\u8D2D\u5165\u4EF7\u683C\uFF08\u5143\uFF09", en: "Purchase price" },
      "form.recycle.placeholder": { zh: "\u56DE\u6536\u4EF7\u683C\uFF08\u5143\uFF09", en: "Recycle price" },
      "form.tags.placeholder": { zh: "\u8F93\u5165\u6807\u7B7E\uFF0C\u56DE\u8F66\u786E\u8BA4", en: "Type tags and press Enter" },
      "form.action.cancel": { zh: "\u53D6\u6D88", en: "Cancel" },
      "form.action.delete": { zh: "\u5220\u9664", en: "Delete" },
      "form.action.save": { zh: "\u4FDD\u5B58", en: "Save" },
      "form.error.nameRequired": { zh: "\u8BF7\u586B\u5199\u540D\u79F0", en: "Please enter a name" },
      "form.error.priceInvalid": { zh: "\u8BF7\u586B\u5199\u6709\u6548\u7684\u4EF7\u683C", en: "Please enter a valid price" },
      "form.error.fromRequired": { zh: "\u8BF7\u9009\u62E9\u8D2D\u5165\u65E5\u671F", en: "Please select a purchase date" },
      "form.error.toBeforeFrom": { zh: "\u5230\u671F\u65E5\u671F\u9700\u4E0D\u65E9\u4E8E\u8D2D\u5165\u65E5\u671F", en: "End date must not be earlier than purchase date" },
      "form.error.recycleInvalid": { zh: "\u56DE\u6536\u4EF7\u683C\u683C\u5F0F\u4E0D\u6B63\u786E", en: "Invalid recycle price format" },
      "form.error.recycleGtPrice": { zh: "\u56DE\u6536\u4EF7\u4E0D\u80FD\u5927\u4E8E\u4EF7\u683C", en: "Recycle price must not exceed price" },
      // Tag panel
      "tags.search.placeholder": { zh: "\u641C\u7D22\u6807\u7B7E", en: "Search tags" },
      "tags.selectAll": { zh: "\u5168\u9009", en: "Select all" },
      "tags.deselectAll": { zh: "\u53D6\u6D88\u5168\u9009", en: "Deselect all" }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LacCostSetPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// types.ts
var DEFAULT_SETTINGS = {
  defaultIcon: "\u{1F4E6}",
  entryFile: "LaC/CostSet/costset.md",
  enableContextMenu: true,
  defaultSort: "none",
  locale: "auto"
};

// main.ts
init_i18n();

// repositories/AssetRepository.ts
var import_obsidian = require("obsidian");

// models/Asset.ts
var Asset = class {
  constructor(idOrRawData, tomlData) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (typeof idOrRawData === "string" && tomlData) {
      this.id = idOrRawData;
      const src = tomlData.costset ? tomlData.costset : tomlData;
      this.name = src.name || "";
      this.icon = (_d = (_c = (_a = src.style) == null ? void 0 : _a.icon) != null ? _c : (_b = tomlData.style) == null ? void 0 : _b.icon) != null ? _d : "\u{1F4E6}";
      const detail = (_f = (_e = src.detail) != null ? _e : tomlData.detail) != null ? _f : {};
      this.price = Number(detail.price) || 0;
      this.activeFrom = this.parseDate(detail.active_from) || new Date();
      this.activeTo = this.parseDate(detail.active_to) || void 0;
      this.recyclePrice = Number(detail.recycle_price) || 0;
      this.tags = Array.isArray(detail.tags) ? detail.tags : (detail.tags || "").split(",").map((l) => l.trim()).filter((tag) => tag);
      this.hidden = !!((_g = detail.hidden) != null ? _g : src.hidden);
    } else if (typeof idOrRawData === "object") {
      this.id = idOrRawData.id || "";
      this.name = idOrRawData.name || "";
      this.icon = idOrRawData.icon || "\u{1F4E6}";
      this.price = Number(idOrRawData.price) || 0;
      this.activeFrom = this.parseDate(idOrRawData.active_from || idOrRawData.activeFrom) || new Date();
      this.activeTo = this.parseDate(idOrRawData.active_to || idOrRawData.activeTo) || void 0;
      this.recyclePrice = Number(idOrRawData.recycle_price) || 0;
      this.tags = Array.isArray(idOrRawData.tags) ? idOrRawData.tags : (idOrRawData.tags || "").split(",").map((l) => l.trim()).filter((tag) => tag);
      this.hidden = !!idOrRawData.hidden;
    } else {
      throw new Error("Invalid asset data");
    }
  }
  parseDate(dateStr) {
    if (!dateStr)
      return void 0;
    const date = new Date(dateStr);
    return isNaN(date.getTime()) ? void 0 : date;
  }
  getName() {
    return this.name;
  }
  getPrice() {
    return this.price;
  }
  getDailyCost(now = new Date()) {
    const from = this.activeFrom;
    const end = this.activeTo && this.activeTo.getTime() < now.getTime() ? this.activeTo : now;
    const days = Math.max(1, Math.floor((end.getTime() - from.getTime()) / 864e5));
    return (this.price - this.recyclePrice) / days;
  }
  getUsageDays(now = new Date()) {
    const from = this.activeFrom;
    const end = this.activeTo && this.activeTo.getTime() < now.getTime() ? this.activeTo : now;
    return Math.max(1, Math.floor((end.getTime() - from.getTime()) / 864e5));
  }
  isActive(date = new Date()) {
    return this.activeFrom <= date && (!this.activeTo || date < this.activeTo);
  }
  toTomlString() {
    const formatDate = (date) => {
      if (!date)
        return "";
      return date.toISOString().split("T")[0];
    };
    return `name = "${this.name}"

[style]
icon = "${this.icon}"

[detail]
price = ${this.price}
active_from = "${formatDate(this.activeFrom)}"
active_to = "${formatDate(this.activeTo)}"
recycle_price = ${this.recyclePrice}
tags = [${this.tags.map((tag) => `"${tag}"`).join(", ")}]
`;
  }
  // 仅输出 costset 命名空间的 TOML 片段（用于安全合并）
  toCostsetTomlSections() {
    const formatDate = (date) => {
      if (!date)
        return "";
      return date.toISOString().split("T")[0];
    };
    const tagsStr = this.tags.map((tag) => `"${tag}"`).join(", ");
    return `[costset]
name = "${this.name}"
hidden = ${this.hidden ? "true" : "false"}

[costset.style]
icon = "${this.icon}"

[costset.detail]
price = ${this.price}
active_from = "${formatDate(this.activeFrom)}"
active_to = "${formatDate(this.activeTo)}"
recycle_price = ${this.recyclePrice}
tags = [${tagsStr}]
`;
  }
};

// repositories/AssetRepository.ts
var AssetRepository = class {
  constructor(app, rootFilePath) {
    this.app = app;
    this.rootFilePath = rootFilePath;
  }
  // 获取资产文件夹路径（从根文件路径推导）
  getAssetsFolder() {
    const pathParts = this.rootFilePath.split("/");
    if (pathParts.length > 1) {
      return pathParts.slice(0, -1).join("/");
    }
    return "assets";
  }
  // 加载所有资产
  async loadAll() {
    const rootFile = this.app.vault.getAbstractFileByPath(this.rootFilePath);
    if (!rootFile || !(rootFile instanceof import_obsidian.TFile)) {
      return [];
    }
    try {
      const content = await this.app.vault.read(rootFile);
      const matches = content.match(/\[\[([^\]]+)\]\]/g) || [];
      const linkTargets = matches.map((m) => m.replace(/^\[\[|\]\]$/g, "")).map((s) => {
        var _a;
        return (_a = s.split("|")[0]) == null ? void 0 : _a.trim();
      }).filter(Boolean);
      const assets = [];
      for (const target of linkTargets) {
        let file = null;
        try {
          file = this.app.metadataCache.getFirstLinkpathDest(target, this.rootFilePath);
        } catch (_) {
          file = null;
        }
        if (!file)
          continue;
        try {
          const fileContent = await this.app.vault.read(file);
          const data = this.parseToml(this.quoteWikilinksForToml(fileContent));
          const assetId = file.basename || target;
          const asset = new Asset(assetId, data);
          asset.hidden = false;
          assets.push(asset);
        } catch (e) {
          console.error(`Failed to load asset ${target}:`, e);
        }
      }
      return assets;
    } catch (e) {
      console.error("Failed to load assets:", e);
      return [];
    }
  }
  // 保存资产（仅修改与 costset 相关的键：name、style.icon、detail.*、hidden）
  async saveAsset(asset) {
    let targetFile = null;
    try {
      targetFile = this.app.metadataCache.getFirstLinkpathDest(asset.id, this.rootFilePath);
    } catch (_) {
      targetFile = null;
    }
    if (!targetFile) {
      let fileName = `${asset.id}.md`;
      let filePath = `${this.getAssetsFolder()}/${fileName}`;
      const folder = this.app.vault.getAbstractFileByPath(this.getAssetsFolder());
      if (!folder) {
        await this.app.vault.createFolder(this.getAssetsFolder());
      }
      const initialContent = this.dequoteWikilinks(asset.toTomlString());
      try {
        await this.app.vault.create(filePath, initialContent);
      } catch (e) {
        fileName = `${encodeURIComponent(asset.id)}.md`;
        filePath = `${this.getAssetsFolder()}/${fileName}`;
        await this.app.vault.create(filePath, initialContent);
      }
    } else {
      const existing = await this.app.vault.read(targetFile);
      const rewritten = this.rewriteTomlWithCommentsTop(existing, asset);
      await this.app.vault.modify(targetFile, this.dequoteWikilinks(rewritten));
    }
    await this.updateRootFile(asset.id, true);
  }
  // 删除资产
  async deleteAsset(id) {
    await this.updateRootFile(id, false);
  }
  // 注意：hidden 字段不持久化（仅内存使用），此处不提供 setHidden
  // 更新根文件
  async updateRootFile(assetId, isAdd) {
    const rootPath = this.rootFilePath;
    let rootContent = "";
    try {
      const rootFile = this.app.vault.getAbstractFileByPath(rootPath);
      if (rootFile && rootFile instanceof import_obsidian.TFile) {
        rootContent = await this.app.vault.read(rootFile);
      }
    } catch (e) {
    }
    if (isAdd) {
      const hasAnyLink = new RegExp(`\\[\\[${assetId}(\\|[^\\]]+)?\\]\\]`).test(rootContent);
      if (!hasAnyLink) {
        rootContent += `
[[${assetId}]]`;
      }
    } else {
      rootContent = rootContent.replace(new RegExp(`\\[\\[${assetId}(\\|[^\\]]+)?\\]\\]`, "g"), "");
      rootContent = rootContent.replace(/\n{3,}/g, "\n\n").trimEnd();
    }
    const existingRoot = this.app.vault.getAbstractFileByPath(rootPath);
    if (existingRoot && existingRoot instanceof import_obsidian.TFile) {
      await this.app.vault.modify(existingRoot, rootContent);
    } else {
      await this.app.vault.create(rootPath, rootContent);
    }
  }
  // 解析TOML内容（支持嵌套节名，如 [costset.detail]）
  parseToml(content) {
    const lines = content.split("\n");
    const result = {};
    let currentPath = [];
    const ensurePath = (root, path) => {
      let node = root;
      for (const part of path) {
        if (!node[part] || typeof node[part] !== "object")
          node[part] = {};
        node = node[part];
      }
      return node;
    };
    for (const raw of lines) {
      const line = raw.trim();
      if (!line || line.startsWith("#"))
        continue;
      if (line.startsWith("[") && line.endsWith("]")) {
        const section = line.slice(1, -1).trim();
        currentPath = section.split(".").map((s) => s.trim()).filter(Boolean);
        ensurePath(result, currentPath);
        continue;
      }
      const eq = line.indexOf("=");
      if (eq === -1)
        continue;
      const cleanKey = line.slice(0, eq).trim();
      let cleanValue = line.slice(eq + 1).trim();
      let parsedValue = cleanValue;
      if (cleanValue.startsWith('"') && cleanValue.endsWith('"')) {
        parsedValue = cleanValue.slice(1, -1);
      } else if (cleanValue === "true" || cleanValue === "false") {
        parsedValue = cleanValue === "true";
      } else if (cleanValue.startsWith("[") && cleanValue.endsWith("]")) {
        const arrayContent = cleanValue.slice(1, -1).trim();
        parsedValue = arrayContent ? arrayContent.split(",").map((item) => item.trim().replace(/^"|"$/g, "")) : [];
      } else if (!isNaN(Number(cleanValue))) {
        parsedValue = Number(cleanValue);
      }
      if (currentPath.length > 0) {
        const node = ensurePath(result, currentPath);
        node[cleanKey] = parsedValue;
      } else {
        result[cleanKey] = parsedValue;
      }
    }
    return result;
  }
  // 纯 TOML 重写模式：解析→修改→stringify；将原有注释置顶保留
  rewriteTomlWithCommentsTop(existing, asset) {
    const commentLines = [];
    const otherLines = [];
    for (const raw of existing.split("\n")) {
      const t2 = raw.trim();
      if (t2.startsWith("#"))
        commentLines.push(raw);
      else
        otherLines.push(raw);
    }
    const parsed = this.parseToml(this.quoteWikilinksForToml(otherLines.join("\n"))) || {};
    parsed["name"] = asset.name;
    if (!parsed["style"] || typeof parsed["style"] !== "object")
      parsed["style"] = {};
    parsed["style"]["icon"] = asset.icon;
    if (!parsed["detail"] || typeof parsed["detail"] !== "object")
      parsed["detail"] = {};
    parsed["detail"]["price"] = Number(asset.price) || 0;
    parsed["detail"]["active_from"] = asset.activeFrom ? asset.activeFrom.toISOString().split("T")[0] : "";
    parsed["detail"]["active_to"] = asset.activeTo ? asset.activeTo.toISOString().split("T")[0] : "";
    parsed["detail"]["recycle_price"] = Number(asset.recyclePrice) || 0;
    parsed["detail"]["tags"] = Array.isArray(asset.tags) ? asset.tags : [];
    const tomlBody = this.stringifyToml(parsed);
    const commentBlock = commentLines.length > 0 ? commentLines.join("\n") + "\n\n" : "";
    return commentBlock + tomlBody;
  }
  // 将 JS 对象稳定地序列化为 TOML 文本（支持多层节名）
  stringifyToml(obj) {
    const isPlainObject = (v) => v && typeof v === "object" && !Array.isArray(v);
    const keys = Object.keys(obj || {});
    const scalarKeys = keys.filter((k) => !isPlainObject(obj[k]));
    const objectKeys = keys.filter((k) => isPlainObject(obj[k]));
    const lines = [];
    if (scalarKeys.includes("name")) {
      lines.push(this.renderTomlKeyValue("name", obj["name"]));
    }
    scalarKeys.filter((k) => k !== "name").sort((a, b) => a.localeCompare(b)).forEach((k) => lines.push(this.renderTomlKeyValue(k, obj[k])));
    const sectionOrder = ["style", "detail"];
    const orderedObjectKeys = [
      ...sectionOrder.filter((k) => objectKeys.includes(k)),
      ...objectKeys.filter((k) => !sectionOrder.includes(k)).sort((a, b) => a.localeCompare(b))
    ];
    for (const k of orderedObjectKeys) {
      lines.push("");
      this.renderTomlSection(lines, [k], obj[k]);
    }
    return lines.join("\n").replace(/\n{3,}/g, "\n\n").trim() + "\n";
  }
  renderTomlSection(out, path, value) {
    out.push(`[${path.join(".")}]`);
    const isPlainObject = (v) => v && typeof v === "object" && !Array.isArray(v);
    const keys = Object.keys(value || {});
    const scalarKeys = keys.filter((k) => !isPlainObject(value[k]));
    const objectKeys = keys.filter((k) => isPlainObject(value[k]));
    scalarKeys.sort((a, b) => a.localeCompare(b)).forEach((k) => {
      out.push(this.renderTomlKeyValue(k, value[k]));
    });
    const orderedObjectKeys = objectKeys.sort((a, b) => a.localeCompare(b));
    for (const k of orderedObjectKeys) {
      out.push("");
      this.renderTomlSection(out, [...path, k], value[k]);
    }
  }
  renderTomlKeyValue(key, val) {
    return `${key} = ${this.tomlValue(val)}`;
  }
  tomlValue(val) {
    if (val === null || val === void 0)
      return '""';
    if (Array.isArray(val)) {
      return `[${val.map((v) => this.tomlValue(v)).join(", ")}]`;
    }
    switch (typeof val) {
      case "number":
        return Number.isFinite(val) ? String(val) : "0";
      case "boolean":
        return val ? "true" : "false";
      case "string":
      default:
        return `"${String(val).replace(/\\/g, "\\\\").replace(/\"/g, '\\"')}"`;
    }
  }
  // 将裸的 [[...]] 或 [[...|alias]] 包裹为可被 TOML 解析的字符串
  quoteWikilinksForToml(content) {
    return content.replace(/\[\[[^\]]+\]\]/g, (match, offset, full) => {
      const before = offset > 0 ? full[offset - 1] : "";
      const after = offset + match.length < full.length ? full[offset + match.length] : "";
      if (before === '"' && after === '"' || before === "'" && after === "'") {
        return match;
      }
      return `"${match}"`;
    });
  }
  // 将 "[[...]]" 或 '[[...]]' 形式还原为裸的双链
  dequoteWikilinks(content) {
    return content.replace(/(["'])\[\[[^\]]+\]\]\1/g, (match) => match.slice(1, -1));
  }
};

// components/modals/AssetFormModal.ts
var import_obsidian2 = require("obsidian");

// components/modals/ConfirmModal.ts
var ConfirmModal = class {
  constructor(message, confirmText = "\u786E\u5B9A", cancelText = "\u53D6\u6D88", danger = false) {
    this.message = message;
    this.confirmText = confirmText;
    this.cancelText = cancelText;
    this.danger = danger;
  }
  open() {
    return new Promise((resolve) => {
      this.injectStylesOnce();
      this.maskEl = document.createElement("div");
      this.maskEl.className = "date-picker-mask";
      this.modalEl = document.createElement("div");
      this.modalEl.className = "date-picker-modal";
      const content = document.createElement("div");
      content.className = "date-picker-content";
      const title = document.createElement("div");
      title.className = "date-picker-title";
      try {
        const { t: t2 } = (init_i18n(), __toCommonJS(i18n_exports));
        title.textContent = t2("confirm.title");
      } catch (_) {
        title.textContent = "\u786E\u8BA4\u64CD\u4F5C";
      }
      const msgEl = document.createElement("div");
      msgEl.className = "confirm-message";
      msgEl.textContent = this.message;
      const actions = document.createElement("div");
      actions.className = "date-picker-actions";
      const cancelBtn = document.createElement("button");
      cancelBtn.className = "date-picker-btn date-picker-btn-cancel";
      cancelBtn.textContent = this.cancelText;
      const confirmBtn = document.createElement("button");
      confirmBtn.className = "date-picker-btn date-picker-btn-confirm";
      confirmBtn.textContent = this.confirmText;
      if (this.danger)
        confirmBtn.classList.add("danger");
      actions.appendChild(cancelBtn);
      actions.appendChild(confirmBtn);
      content.appendChild(title);
      content.appendChild(msgEl);
      content.appendChild(actions);
      this.modalEl.appendChild(content);
      this.maskEl.appendChild(this.modalEl);
      document.body.appendChild(this.maskEl);
      const close = (result) => {
        if (this.maskEl && this.maskEl.parentElement) {
          this.maskEl.parentElement.removeChild(this.maskEl);
        }
        this.maskEl = void 0;
        this.modalEl = void 0;
        resolve(result);
      };
      this.maskEl.addEventListener("click", (e) => {
        if (e.target === this.maskEl)
          close(false);
      });
      cancelBtn.addEventListener("click", () => close(false));
      confirmBtn.addEventListener("click", () => close(true));
    });
  }
  injectStylesOnce() {
    const STYLE_ID = "lac-confirm-modal-styles";
    if (document.getElementById(STYLE_ID))
      return;
    const style = document.createElement("style");
    style.id = STYLE_ID;
    style.textContent = `
            .date-picker-modal .confirm-message { color: #F5F6FA; line-height: 1.6; padding: 8px 0 16px; }
            .date-picker-modal .date-picker-btn.danger { background: #7a1e1e; color: #fff; }
            .date-picker-modal .date-picker-btn.danger:hover { background: #992525; }
        `;
    document.head.appendChild(style);
  }
};

// components/modals/AssetFormModal.ts
init_i18n();
var AssetFormModal = class {
  constructor(app, assetRepository, asset, onSaved) {
    this.app = app;
    this.assetRepository = assetRepository;
    this.asset = asset;
    this.onSaved = onSaved;
  }
  open() {
    var _a, _b;
    this.maskEl = document.createElement("div");
    this.maskEl.className = "date-picker-mask";
    this.modalEl = document.createElement("div");
    this.modalEl.className = "date-picker-modal asset-form-modal";
    this.injectAssetFormStyles();
    const content = document.createElement("div");
    content.className = "date-picker-content";
    content.style.gap = "0px";
    const form = document.createElement("form");
    form.className = "asset-form asset-form--horizontal";
    form.style.display = "grid";
    form.style.gridTemplateColumns = "1fr";
    form.style.rowGap = "0px";
    form.style.gap = "0px";
    const ensureErrorEl = (group) => {
      let err = group.querySelector(".field-error");
      if (!err) {
        const field = group.querySelector(".form-field");
        err = document.createElement("div");
        err.className = "field-error";
        if (field)
          field.appendChild(err);
        else
          group.appendChild(err);
      }
      return err;
    };
    const setError = (group, message) => {
      group.classList.add("has-error");
      const input = group.querySelector("input, textarea, select");
      if (input)
        input.setAttribute("aria-invalid", "true");
      ensureErrorEl(group).textContent = message;
    };
    const clearError = (group) => {
      group.classList.remove("has-error");
      const input = group.querySelector("input, textarea, select");
      if (input)
        input.setAttribute("aria-invalid", "false");
      const err = group.querySelector(".field-error");
      if (err)
        err.remove();
    };
    const nameGroup = document.createElement("div");
    nameGroup.className = "form-group";
    {
      const lbl = this.createLabel(t("form.name"));
      lbl.classList.add("label-required");
      nameGroup.appendChild(lbl);
    }
    const nameInput = document.createElement("input");
    nameInput.type = "text";
    nameInput.placeholder = t("form.assetName.placeholder");
    if (this.asset)
      nameInput.value = this.asset.name;
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(nameInput);
      nameGroup.appendChild(field);
    }
    this.applyRowLayout(nameGroup);
    form.appendChild(nameGroup);
    const validateName = () => {
      const v = (nameInput.value || "").trim();
      if (!v) {
        setError(nameGroup, t("form.error.nameRequired"));
        return false;
      }
      clearError(nameGroup);
      return true;
    };
    nameInput.addEventListener("input", validateName);
    nameInput.addEventListener("blur", validateName);
    const iconGroup = document.createElement("div");
    iconGroup.className = "form-group";
    iconGroup.appendChild(this.createLabel(t("form.icon")));
    const iconInput = document.createElement("input");
    iconInput.type = "text";
    iconInput.placeholder = "\u{1F60A}" + t("form.icon.placeholder");
    if (this.asset)
      iconInput.value = this.asset.icon;
    else {
      try {
        const plugin = (_b = (_a = this.app.plugins) == null ? void 0 : _a.plugins) == null ? void 0 : _b["lac-costset"];
        const fallback = "\u{1F4E6}";
        iconInput.value = plugin && plugin.settings && plugin.settings.defaultIcon ? plugin.settings.defaultIcon : fallback;
      } catch (_) {
        iconInput.value = "\u{1F4E6}";
      }
    }
    const enforceSingleEmoji = () => {
      const first = this.getFirstEmojiGrapheme(iconInput.value || "");
      iconInput.value = first || "";
    };
    iconInput.addEventListener("input", enforceSingleEmoji);
    iconInput.addEventListener("paste", (e) => {
      setTimeout(enforceSingleEmoji, 0);
    });
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(iconInput);
      iconGroup.appendChild(field);
    }
    this.applyRowLayout(iconGroup);
    form.appendChild(iconGroup);
    const priceGroup = document.createElement("div");
    priceGroup.className = "form-group";
    {
      const lbl = this.createLabel(t("form.price"));
      lbl.classList.add("label-required");
      priceGroup.appendChild(lbl);
    }
    const priceInput = document.createElement("input");
    priceInput.type = "number";
    priceInput.placeholder = t("form.price.placeholder");
    priceInput.step = "0.01";
    if (this.asset)
      priceInput.value = this.asset.price.toString();
    const sanitizeNumeric = (el) => {
      el.value = this.sanitizeNumericString(el.value || "");
    };
    const limitTwoDecimals = (el) => {
      el.value = this.clampTwoDecimalsString(el.value || "");
    };
    priceInput.addEventListener("input", () => sanitizeNumeric(priceInput));
    priceInput.addEventListener("blur", () => {
      sanitizeNumeric(priceInput);
      limitTwoDecimals(priceInput);
    });
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(priceInput);
      priceGroup.appendChild(field);
    }
    this.applyRowLayout(priceGroup);
    form.appendChild(priceGroup);
    const validatePrice = () => {
      const str = (priceInput.value || "").trim();
      const num = this.parseMoney(str);
      if (num === null) {
        setError(priceGroup, t("form.error.priceInvalid"));
        return false;
      }
      clearError(priceGroup);
      return true;
    };
    priceInput.addEventListener("input", validatePrice);
    priceInput.addEventListener("blur", validatePrice);
    const fromGroup = document.createElement("div");
    fromGroup.className = "form-group";
    {
      const lbl = this.createLabel(t("form.purchaseOn"));
      lbl.classList.add("label-required");
      fromGroup.appendChild(lbl);
    }
    const fromInput = document.createElement("input");
    fromInput.type = "text";
    fromInput.readOnly = true;
    fromInput.placeholder = t("form.purchaseDate");
    fromInput.value = this.asset ? this.formatDateLocal(this.asset.activeFrom) : "";
    fromInput.addEventListener("click", () => {
      var _a2;
      this.openDatePicker(fromInput.value ? new Date(fromInput.value) : ((_a2 = this.asset) == null ? void 0 : _a2.activeFrom) || new Date(), (picked) => {
        fromInput.value = this.formatDateLocal(picked);
        clearError(fromGroup);
      });
    });
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(fromInput);
      fromGroup.appendChild(field);
    }
    this.applyRowLayout(fromGroup);
    form.appendChild(fromGroup);
    const validateFrom = () => {
      if (!fromInput.value) {
        setError(fromGroup, t("form.error.fromRequired"));
        return false;
      }
      clearError(fromGroup);
      return true;
    };
    fromInput.addEventListener("blur", validateFrom);
    const toGroup = document.createElement("div");
    toGroup.className = "form-group";
    toGroup.appendChild(this.createLabel(t("form.endDate")));
    const toInput = document.createElement("input");
    toInput.type = "text";
    toInput.readOnly = true;
    toInput.placeholder = t("form.endDatePlaceholder");
    toInput.value = this.asset && this.asset.activeTo ? this.formatDateLocal(this.asset.activeTo) : "";
    let clearBtn;
    const updateToClear = () => {
      if (clearBtn)
        clearBtn.style.display = toInput.value ? "inline-flex" : "none";
    };
    toInput.addEventListener("click", () => {
      var _a2;
      this.openDatePicker(toInput.value ? new Date(toInput.value) : ((_a2 = this.asset) == null ? void 0 : _a2.activeTo) || new Date(), (picked) => {
        toInput.value = this.formatDateLocal(picked);
        updateToClear();
        if (fromInput.value) {
          const fd = new Date(fromInput.value);
          const td = new Date(toInput.value);
          if (td.getTime() < fd.getTime())
            setError(toGroup, t("form.error.toBeforeFrom"));
          else
            clearError(toGroup);
        }
      });
    });
    {
      const field = document.createElement("div");
      field.className = "form-field";
      const wrap = document.createElement("div");
      wrap.className = "input-with-clear";
      wrap.appendChild(toInput);
      clearBtn = document.createElement("button");
      clearBtn.type = "button";
      clearBtn.className = "input-clear";
      clearBtn.textContent = "\xD7";
      clearBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        toInput.value = "";
        updateToClear();
      });
      wrap.appendChild(clearBtn);
      field.appendChild(wrap);
      toGroup.appendChild(field);
    }
    this.applyRowLayout(toGroup);
    form.appendChild(toGroup);
    updateToClear();
    const recycleGroup = document.createElement("div");
    recycleGroup.className = "form-group";
    recycleGroup.appendChild(this.createLabel(t("form.recyclePrice")));
    const recycleInput = document.createElement("input");
    recycleInput.type = "number";
    recycleInput.placeholder = t("form.recycle.placeholder");
    recycleInput.step = "0.01";
    if (this.asset)
      recycleInput.value = this.asset.recyclePrice.toString();
    recycleInput.addEventListener("input", () => sanitizeNumeric(recycleInput));
    recycleInput.addEventListener("blur", () => {
      sanitizeNumeric(recycleInput);
      limitTwoDecimals(recycleInput);
    });
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(recycleInput);
      recycleGroup.appendChild(field);
    }
    this.applyRowLayout(recycleGroup);
    form.appendChild(recycleGroup);
    const tagsGroup = document.createElement("div");
    tagsGroup.className = "form-group";
    tagsGroup.appendChild(this.createLabel(t("form.tags")));
    let currentTags = this.asset ? [...this.asset.tags || []] : [];
    const tagsWrapper = document.createElement("div");
    tagsWrapper.className = "tags-input";
    const tagsInput = document.createElement("input");
    tagsInput.type = "text";
    tagsInput.placeholder = t("form.tags.placeholder");
    tagsWrapper.appendChild(tagsInput);
    {
      const field = document.createElement("div");
      field.className = "form-field";
      field.appendChild(tagsWrapper);
      tagsGroup.appendChild(field);
    }
    this.applyRowLayout(tagsGroup);
    form.appendChild(tagsGroup);
    const normalize = (tstr) => tstr.trim();
    const addTag = (raw) => {
      const pieces = raw.split(/[，,\s]+/).map(normalize).filter(Boolean);
      pieces.forEach((p) => {
        if (!currentTags.includes(p))
          currentTags.push(p);
      });
      syncChips();
      tagsInput.value = "";
    };
    const removeTag = (value) => {
      currentTags = currentTags.filter((tg) => tg !== value);
      syncChips();
    };
    const syncChips = () => {
      Array.from(tagsWrapper.querySelectorAll(".tag-chip")).forEach((el) => el.remove());
      currentTags.forEach((tag) => {
        const chip = document.createElement("span");
        chip.className = "tag-chip";
        chip.textContent = tag;
        const rm = document.createElement("button");
        rm.type = "button";
        rm.className = "remove";
        rm.textContent = "\xD7";
        rm.addEventListener("click", () => removeTag(tag));
        chip.appendChild(rm);
        tagsWrapper.insertBefore(chip, tagsInput);
      });
    };
    syncChips();
    tagsInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === "," || e.key === "\uFF0C") {
        e.preventDefault();
        if (tagsInput.value.trim())
          addTag(tagsInput.value);
      }
      if (e.key === "Backspace" && !tagsInput.value && currentTags.length > 0) {
        e.preventDefault();
        removeTag(currentTags[currentTags.length - 1]);
      }
    });
    tagsInput.addEventListener("blur", () => {
      if (tagsInput.value.trim())
        addTag(tagsInput.value);
    });
    const actions = document.createElement("div");
    actions.className = "form-actions";
    const cancelBtn = document.createElement("button");
    cancelBtn.type = "button";
    cancelBtn.textContent = t("form.action.cancel");
    cancelBtn.className = "form-btn form-btn-secondary";
    const deleteBtn = document.createElement("button");
    deleteBtn.type = "button";
    deleteBtn.textContent = t("form.action.delete");
    deleteBtn.className = "form-btn form-btn-danger";
    const saveBtn = document.createElement("button");
    saveBtn.type = "submit";
    saveBtn.textContent = t("form.action.save");
    saveBtn.className = "form-btn form-btn-primary";
    actions.appendChild(cancelBtn);
    if (this.asset)
      actions.appendChild(deleteBtn);
    actions.appendChild(saveBtn);
    form.appendChild(actions);
    content.appendChild(form);
    this.modalEl.appendChild(content);
    this.maskEl.appendChild(this.modalEl);
    document.body.appendChild(this.maskEl);
    const close = () => this.close();
    this.maskEl.addEventListener("click", (e) => {
      if (e.target === this.maskEl)
        close();
    });
    cancelBtn.addEventListener("click", close);
    if (this.asset) {
      deleteBtn.addEventListener("click", async () => {
        if (!this.asset)
          return;
        const ok = await new ConfirmModal(t("view.confirmDeleteAsset", { name: this.asset.name }), t("common.delete"), t("common.cancel"), true).open();
        if (!ok)
          return;
        await this.assetRepository.deleteAsset(this.asset.id);
        if (this.onSaved)
          this.onSaved();
        close();
      });
    }
    form.addEventListener("submit", async (e) => {
      var _a2, _b2, _c;
      e.preventDefault();
      clearError(nameGroup);
      clearError(priceGroup);
      clearError(fromGroup);
      clearError(toGroup);
      clearError(recycleGroup);
      const nameVal = (nameInput.value || "").trim();
      const priceStr = (priceInput.value || "").trim();
      const priceNum = this.parseMoney(priceStr);
      let valid = true;
      if (!nameVal) {
        setError(nameGroup, t("form.error.nameRequired"));
        valid = false;
      }
      if (priceNum === null) {
        setError(priceGroup, t("form.error.priceInvalid"));
        valid = false;
      }
      if (!fromInput.value) {
        setError(fromGroup, t("form.error.fromRequired"));
        valid = false;
      }
      if (!valid) {
        const firstErr = [nameGroup, priceGroup, fromGroup].find((g) => g.classList.contains("has-error"));
        if (firstErr) {
          (_a2 = firstErr.querySelector("input")) == null ? void 0 : _a2.focus();
          firstErr.scrollIntoView({ behavior: "smooth", block: "center" });
        }
        return;
      }
      const fromDate = new Date(fromInput.value);
      const priceValue = priceNum;
      let toDate = void 0;
      if (toInput.value) {
        const d = new Date(toInput.value);
        if (d.getTime() < fromDate.getTime()) {
          setError(toGroup, t("form.error.toBeforeFrom"));
          (_b2 = toGroup.querySelector("input")) == null ? void 0 : _b2.focus();
          return;
        }
        toDate = d;
      }
      const recycleStr = (recycleInput.value || "").trim();
      const recycleNum = recycleStr ? this.parseMoney(recycleStr) : 0;
      if (recycleStr && recycleNum === null) {
        setError(recycleGroup, t("form.error.recycleInvalid"));
        return;
      }
      if ((recycleNum || 0) > priceValue) {
        setError(recycleGroup, t("form.error.recycleGtPrice"));
        return;
      }
      const assetData = {
        id: ((_c = this.asset) == null ? void 0 : _c.id) || nameVal,
        name: nameVal,
        icon: iconInput.value || "\u{1F4E6}",
        price: priceValue,
        activeFrom: fromDate,
        activeTo: toDate,
        recyclePrice: recycleNum || 0,
        tags: currentTags
      };
      try {
        const asset = new Asset(assetData);
        await this.assetRepository.saveAsset(asset);
        if (this.onSaved)
          this.onSaved();
        close();
      } catch (error) {
        new import_obsidian2.Notice(t("notice.saveFailed", { msg: error.message }));
      }
    });
  }
  injectAssetFormStyles() {
    const STYLE_ID = "asset-form-inline-styles";
    if (document.getElementById(STYLE_ID))
      return;
    const style = document.createElement("style");
    style.id = STYLE_ID;
    style.textContent = `
			/* \u5230\u671F\u8F93\u5165\u6E05\u9664\u6309\u94AE */
			.date-picker-modal.asset-form-modal .input-with-clear { position: relative; }
			.date-picker-modal.asset-form-modal .input-with-clear .input-clear { position: absolute; right: 6px; top: 50%; transform: translateY(-50%); width: 18px; height: 18px; border-radius: 50%; display: none; align-items: center; justify-content: center; font-size: 14px; line-height: 18px; }
			/* \u5F39\u7A97\u5BB9\u5668\u66F4\u7D27\u51D1 */
			.date-picker-modal.asset-form-modal { max-height: 80vh; overflow: auto; }
			.date-picker-modal.asset-form-modal .date-picker-content { padding: 16px 20px; display: flex; flex-direction: column; gap: 0 !important; }
			.date-picker-modal.asset-form-modal .date-picker-title { font-size: 14px; margin-bottom: 6px; }

			/* \u6A2A\u5411\u8868\u5355\u5E03\u5C40\uFF0C\u538B\u7F29\u5782\u76F4\u7A7A\u767D */
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal { font-size: 15.5px; display: grid !important; grid-template-columns: 1fr; row-gap: 8px !important; column-gap: 0 !important; gap: 8px !important; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .form-group { display: grid !important; grid-template-columns: 64px 1fr; align-items: center; column-gap: 8px; row-gap: 0; margin: 0 !important; padding: 0 !important; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal label { min-width: 64px; margin: 0; text-align: right; justify-self: end; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .form-field { width: 100%; margin: 0 !important; padding: 0 !important; }
			/* \u538B\u7F29\u8F93\u5165\u63A7\u4EF6\u9AD8\u5EA6\u4E0E\u5185\u8FB9\u8DDD */
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal input[type="text"],
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal input[type="number"] { height: 32px; padding: 4px 10px; font-size: 15.5px; line-height: 1.45; }
			/* \u6807\u7B7E\u8F93\u5165\u4E0E chip \u66F4\u7D27\u51D1 */
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .tags-input { display: flex; flex-wrap: wrap; gap: 4px; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .tag-chip { font-size: 12px; height: 18px; line-height: 18px; padding: 0 6px; border-radius: 4px; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .tag-chip .remove { width: 16px; height: 16px; line-height: 16px; font-size: 12px; margin-left: 4px; }
			.date-picker-modal.asset-form-modal .asset-form.asset-form--horizontal .tags-input input { flex: 1; min-width: 120px; height: 28px; padding: 4px 10px; font-size: 14.5px; }

			/* \u5FC5\u586B\u4E0E\u9519\u8BEF\u6837\u5F0F */
			.date-picker-modal.asset-form-modal .label-required::after { content: ' *'; color: #ff4d4f; margin-left: 2px; }
			.date-picker-modal.asset-form-modal .form-group.has-error input[type="text"],
			.date-picker-modal.asset-form-modal .form-group.has-error input[type="number"] { border-color: #ff4d4f !important; box-shadow: 0 0 0 1px #ff4d4f inset; }
			.date-picker-modal.asset-form-modal .field-error { margin-top: 4px; color: #ff8587; font-size: 12px; line-height: 1.3; }
			.date-picker-modal.asset-form-modal .field-error:empty { display: none; margin-top: 0; }

			/* \u64CD\u4F5C\u6309\u94AE\u533A\u66F4\u7D27\u51D1 */
			.date-picker-modal.asset-form-modal .form-actions { margin-top: 12px; gap: 16px; display: flex; justify-content: center; }
			.date-picker-modal.asset-form-modal .form-btn { height: 34px; padding: 0 14px; font-size: 14px; }
		`;
    document.head.appendChild(style);
  }
  applyRowLayout(group) {
    group.style.display = "grid";
    group.style.gridTemplateColumns = "72px 1fr";
    group.style.alignItems = "center";
    group.style.columnGap = "8px";
    group.style.rowGap = "0px";
    group.style.margin = "0";
    const label = group.querySelector("label");
    if (label) {
      label.style.minWidth = "72px";
      label.style.display = "inline-block";
      label.style.margin = "0";
    }
    const field = group.querySelector(".form-field");
    if (field) {
      field.style.width = "100%";
    }
  }
  close() {
    if (this.maskEl && this.maskEl.parentElement) {
      this.maskEl.parentElement.removeChild(this.maskEl);
    }
    this.maskEl = void 0;
    this.modalEl = void 0;
  }
  formatDateLocal(date) {
    const d = new Date(date.getTime() - date.getTimezoneOffset() * 6e4);
    return d.toISOString().split("T")[0];
  }
  // —— 金额字符串处理（成熟逻辑）——
  sanitizeNumericString(value) {
    let v = (value || "").replace(/[^\d.]/g, "");
    v = v.replace(/^\./, "");
    v = v.replace(/\.(?=.*\.)/g, "");
    return v;
  }
  clampTwoDecimalsString(value) {
    const m = (value || "").match(/^(\d+)(?:\.(\d*))?$/);
    if (!m)
      return "";
    const intPart = m[1];
    const decPart = (m[2] || "").slice(0, 2);
    return decPart ? `${intPart}.${decPart}` : intPart;
  }
  parseMoney(value) {
    const sanitized = this.sanitizeNumericString(value);
    const clamped = this.clampTwoDecimalsString(sanitized);
    if (clamped === "")
      return null;
    const num = Number(clamped);
    return Number.isFinite(num) && num >= 0 ? num : null;
  }
  // 与 costsetapp 对齐：用 surrogate pair 匹配获取第一个 emoji
  getFirstEmojiGrapheme(input) {
    const emojiRegex = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
    const m = (input || "").match(emojiRegex);
    return m ? m[0] : "";
  }
  // 弹出日期选择器（复用日期/标签弹窗风格）
  openDatePicker(currentDate, onConfirm) {
    const mask = document.createElement("div");
    mask.className = "date-picker-mask";
    const picker = document.createElement("div");
    picker.className = "date-picker-modal";
    const content = document.createElement("div");
    content.className = "date-picker-content";
    const title = document.createElement("div");
    title.className = "date-picker-title";
    title.textContent = t("date.pick");
    const wheelContainer = document.createElement("div");
    wheelContainer.className = "date-wheel-container";
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1;
    const currentDay = currentDate.getDate();
    const yearColumn = this.createWheelColumn(t("date.year"), this.generateYears(currentYear), currentYear, (year) => {
      this.updateDaysColumn(dayColumn, year, monthColumn.selectedValue);
    }, false);
    const monthColumn = this.createWheelColumn(t("date.month"), this.generateMonths(), currentMonth, (month) => {
      this.updateDaysColumn(dayColumn, yearColumn.selectedValue, month);
    }, true);
    const dayColumn = this.createWheelColumn(t("date.day"), this.generateDays(currentYear, currentMonth), currentDay, void 0, true);
    wheelContainer.appendChild(yearColumn.element);
    wheelContainer.appendChild(monthColumn.element);
    wheelContainer.appendChild(dayColumn.element);
    const actions = document.createElement("div");
    actions.className = "date-picker-actions";
    const cancelBtn = document.createElement("button");
    cancelBtn.className = "date-picker-btn date-picker-btn-cancel";
    cancelBtn.textContent = t("common.cancel");
    const confirmBtn = document.createElement("button");
    confirmBtn.className = "date-picker-btn date-picker-btn-confirm";
    confirmBtn.textContent = t("common.confirm");
    actions.appendChild(cancelBtn);
    actions.appendChild(confirmBtn);
    content.appendChild(title);
    content.appendChild(wheelContainer);
    content.appendChild(actions);
    picker.appendChild(content);
    mask.appendChild(picker);
    document.body.appendChild(mask);
    const closePicker = () => {
      document.body.removeChild(mask);
    };
    mask.addEventListener("click", (e) => {
      if (e.target === mask)
        closePicker();
    });
    cancelBtn.addEventListener("click", closePicker);
    confirmBtn.addEventListener("click", () => {
      const year = yearColumn.selectedValue;
      const month = monthColumn.selectedValue;
      const day = dayColumn.selectedValue;
      const picked = new Date(`${year}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`);
      onConfirm(picked);
      closePicker();
    });
  }
  generateYears(currentYear) {
    const minYear = 1900;
    const nowYear = new Date().getFullYear();
    const maxYear = nowYear + 7;
    const years = [];
    for (let i = minYear; i <= maxYear; i++)
      years.push(i);
    return years;
  }
  generateMonths() {
    return Array.from({ length: 12 }, (_, i) => i + 1);
  }
  generateDays(year, month) {
    const daysInMonth = new Date(year, month, 0).getDate();
    return Array.from({ length: daysInMonth }, (_, i) => i + 1);
  }
  createWheelColumn(suffix, values, selectedValue, onChange, isInfinite = false) {
    const column = document.createElement("div");
    column.className = "date-wheel-column";
    const container = document.createElement("div");
    container.className = "date-wheel-items";
    let selectedIndex = values.indexOf(selectedValue);
    let currentSelectedValue = selectedValue;
    const api = { element: column, selectedValue: currentSelectedValue };
    const itemHeight = 40;
    if (isInfinite) {
      const repeatCount = 5;
      const totalItems = values.length * repeatCount;
      const middleGroupIndex = 2;
      const initialScrollTop = middleGroupIndex * values.length * itemHeight + selectedIndex * itemHeight;
      for (let repeat = 0; repeat < repeatCount; repeat++) {
        values.forEach((value, index) => {
          const item = document.createElement("div");
          item.className = "date-wheel-item";
          item.textContent = `${value.toString().padStart(2, "0")}${suffix}`;
          item.dataset.value = value.toString();
          item.dataset.index = (repeat * values.length + index).toString();
          item.dataset.realValue = value.toString();
          container.appendChild(item);
        });
      }
      container.style.height = `${totalItems * itemHeight}px`;
      const initialItemIndex = middleGroupIndex * values.length + selectedIndex;
      const items = Array.from(container.querySelectorAll(".date-wheel-item"));
      if (items[initialItemIndex]) {
        items.forEach((el, idx) => el.classList.toggle("selected", idx === initialItemIndex));
      }
      requestAnimationFrame(() => {
        container.scrollTop = initialScrollTop;
      });
      let isScrolling = false;
      container.addEventListener("scroll", () => {
        if (isScrolling)
          return;
        const scrollTop = container.scrollTop;
        const currentIndex = Math.round(scrollTop / itemHeight);
        const realIndex = (currentIndex % values.length + values.length) % values.length;
        const realValue = values[realIndex];
        container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
          const itemRealIndex = index % values.length;
          item.classList.toggle("selected", itemRealIndex === realIndex);
        });
        selectedIndex = realIndex;
        currentSelectedValue = realValue;
        api.selectedValue = realValue;
        if (onChange)
          onChange(currentSelectedValue);
        const maxScrollTop = (repeatCount - 1) * values.length * itemHeight;
        if (scrollTop >= maxScrollTop) {
          isScrolling = true;
          const offset = scrollTop - maxScrollTop;
          container.scrollTop = values.length * itemHeight + offset;
          setTimeout(() => {
            isScrolling = false;
          }, 50);
        } else if (scrollTop <= 0) {
          isScrolling = true;
          const offset = scrollTop;
          container.scrollTop = (repeatCount - 2) * values.length * itemHeight + offset;
          setTimeout(() => {
            isScrolling = false;
          }, 50);
        }
      });
      container.addEventListener("click", (ev) => {
        const target = ev.target;
        const itemEl = target && target.closest ? target.closest(".date-wheel-item") : null;
        if (!itemEl)
          return;
        const clickedIndex = Number(itemEl.dataset.index || "0");
        const realIndex = (clickedIndex % values.length + values.length) % values.length;
        const middleIndex = middleGroupIndex * values.length + realIndex;
        container.scrollTop = middleIndex * itemHeight;
        selectedIndex = realIndex;
        currentSelectedValue = values[realIndex];
        api.selectedValue = currentSelectedValue;
        if (onChange)
          onChange(currentSelectedValue);
      });
    } else {
      values.forEach((value, index) => {
        const item = document.createElement("div");
        item.className = "date-wheel-item";
        item.textContent = `${value.toString().padStart(2, "0")}${suffix}`;
        item.dataset.value = value.toString();
        item.dataset.index = index.toString();
        if (value === currentSelectedValue)
          item.classList.add("selected");
        container.appendChild(item);
      });
      container.addEventListener("scroll", () => {
        const scrollTop = container.scrollTop;
        const newIndex = Math.round(scrollTop / itemHeight);
        if (newIndex !== selectedIndex && newIndex >= 0 && newIndex < values.length) {
          container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
            item.classList.toggle("selected", index === newIndex);
          });
          selectedIndex = newIndex;
          currentSelectedValue = values[newIndex];
          api.selectedValue = currentSelectedValue;
          if (onChange)
            onChange(currentSelectedValue);
        }
      });
      container.addEventListener("click", (ev) => {
        const target = ev.target;
        const itemEl = target && target.closest ? target.closest(".date-wheel-item") : null;
        if (!itemEl)
          return;
        const idx = Number(itemEl.dataset.index || "0");
        container.querySelectorAll(".date-wheel-item").forEach((el, i) => {
          el.classList.toggle("selected", i === idx);
        });
        container.scrollTop = idx * itemHeight;
        selectedIndex = idx;
        currentSelectedValue = values[idx];
        api.selectedValue = currentSelectedValue;
        if (onChange)
          onChange(currentSelectedValue);
      });
      setTimeout(() => {
        container.scrollTop = selectedIndex * itemHeight;
      }, 0);
    }
    column.appendChild(container);
    return api;
  }
  updateDaysColumn(dayColumn, year, month) {
    const container = dayColumn.element.querySelector(".date-wheel-items");
    const currentDay = dayColumn.selectedValue;
    const newDays = this.generateDays(year, month);
    while (container.firstChild)
      container.removeChild(container.firstChild);
    const repeatCount = 5;
    const itemHeight = 40;
    const middleGroupIndex = 2;
    const maxDay = Math.max(...newDays);
    const selectedDay = Math.min(currentDay, maxDay);
    const selectedIndex = newDays.indexOf(selectedDay);
    for (let repeat = 0; repeat < repeatCount; repeat++) {
      newDays.forEach((day, index) => {
        const item = document.createElement("div");
        item.className = "date-wheel-item";
        item.textContent = `${day.toString().padStart(2, "0")}${t("date.day")}`;
        item.dataset.value = day.toString();
        item.dataset.index = (repeat * newDays.length + index).toString();
        item.dataset.realValue = day.toString();
        container.appendChild(item);
      });
    }
    container.style.height = `${newDays.length * repeatCount * itemHeight}px`;
    const initialItemIndexDay = middleGroupIndex * newDays.length + selectedIndex;
    const dayItems = Array.from(container.querySelectorAll(".date-wheel-item"));
    if (dayItems[initialItemIndexDay]) {
      dayItems.forEach((el, idx) => el.classList.toggle("selected", idx === initialItemIndexDay));
    }
    requestAnimationFrame(() => {
      container.scrollTop = middleGroupIndex * newDays.length * itemHeight + selectedIndex * itemHeight;
    });
    let isScrolling = false;
    container.addEventListener("scroll", () => {
      if (isScrolling)
        return;
      const scrollTop = container.scrollTop;
      const currentIndex = Math.round(scrollTop / itemHeight);
      const realIndex = currentIndex % newDays.length;
      const realValue = newDays[realIndex];
      container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
        const itemRealIndex = index % newDays.length;
        item.classList.toggle("selected", itemRealIndex === realIndex);
      });
      dayColumn.selectedValue = realValue;
      const maxScrollTop = (repeatCount - 1) * newDays.length * itemHeight;
      if (scrollTop >= maxScrollTop) {
        isScrolling = true;
        const offset = scrollTop - maxScrollTop;
        container.scrollTop = newDays.length * itemHeight + offset;
        setTimeout(() => {
          isScrolling = false;
        }, 50);
      } else if (scrollTop <= 0) {
        isScrolling = true;
        const offset = scrollTop;
        container.scrollTop = (repeatCount - 2) * newDays.length * itemHeight + offset;
        setTimeout(() => {
          isScrolling = false;
        }, 50);
      }
    });
    container.addEventListener("click", (ev) => {
      const target = ev.target;
      const itemEl = target && target.closest ? target.closest(".date-wheel-item") : null;
      if (!itemEl)
        return;
      const clickedIndex = Number(itemEl.dataset.index || "0");
      const realIndex = clickedIndex % newDays.length;
      const middleIndex = middleGroupIndex * newDays.length + realIndex;
      container.scrollTop = middleIndex * itemHeight;
      dayColumn.selectedValue = newDays[realIndex];
    });
  }
  createLabel(text) {
    const el = document.createElement("label");
    el.textContent = text;
    return el;
  }
};

// components/AssetManagerView.ts
var import_obsidian3 = require("obsidian");

// components/TagPanel.ts
var TagPanel = class {
  // i18n 延后加载，避免硬依赖：使用动态导入
  constructor(containerEl, props) {
    this.panelVisible = false;
    this.panelSelected = [];
    this.searchKeyword = "";
    this.containerEl = containerEl;
    this.props = props;
    this.panelSelected = [...props.selectedTags];
  }
  render() {
    this.containerEl.empty();
    this.containerEl.addClass("top-summary-labels");
    if (this.props.maxHeight) {
      this.containerEl.style.maxHeight = this.props.maxHeight;
      this.containerEl.style.overflowY = this.props.maxHeight !== "auto" ? "auto" : "visible";
    }
    this.renderTagList();
    if (this.panelVisible) {
      this.renderSelectionPanel();
    }
  }
  renderTagList() {
    this.props.tags.forEach((tag) => {
      const labelEl = this.containerEl.createSpan("top-summary-label");
      labelEl.textContent = tag;
      if (this.props.selectedTags.includes(tag)) {
        labelEl.addClass("selected");
      }
      labelEl.addEventListener("click", (e) => {
        e.stopPropagation();
        this.props.onTagClick(tag);
      });
    });
    this.containerEl.addEventListener("click", () => {
      this.showSelectionPanel();
    });
  }
  showSelectionPanel() {
    this.panelVisible = true;
    this.panelSelected = [...this.props.selectedTags];
    this.render();
  }
  hideSelectionPanel() {
    this.panelVisible = false;
    if (this.maskEl && this.maskEl.parentElement) {
      this.maskEl.parentElement.removeChild(this.maskEl);
    }
    this.maskEl = void 0;
    this.panelEl = void 0;
    this.labelsEl = void 0;
    this.searchEl = void 0;
    this.render();
  }
  renderSelectionPanel() {
    var _a, _b, _c, _d, _e, _f;
    if (!this.maskEl) {
      this.maskEl = this.containerEl.createDiv("top-summary-panel-mask");
      this.maskEl.style.zIndex = "9999";
      this.maskEl.addEventListener("click", () => {
        this.confirmSelection();
      });
    }
    if (!this.panelEl) {
      this.panelEl = this.maskEl.createDiv("top-summary-panel");
      this.panelEl.style.zIndex = "10000";
      this.panelEl.addEventListener("click", (e) => {
        e.stopPropagation();
      });
    }
    if (!this.searchEl) {
      this.searchEl = this.panelEl.createEl("input", {
        cls: "top-summary-panel-search",
        placeholder: ((_b = (_a = (init_i18n(), __toCommonJS(i18n_exports))) == null ? void 0 : _a.t) == null ? void 0 : _b.call(_a, "tags.search.placeholder")) || "\u641C\u7D22\u6807\u7B7E",
        type: "text"
      });
      this.searchEl.addEventListener("input", () => {
        var _a2;
        this.searchKeyword = (((_a2 = this.searchEl) == null ? void 0 : _a2.value) || "").trim();
        this.renderSelectionPanel();
      });
    }
    if (this.searchEl) {
      this.searchEl.value = this.searchKeyword;
    }
    const prevScrollTop = this.labelsEl ? this.labelsEl.scrollTop : 0;
    if (!this.labelsEl) {
      this.labelsEl = this.panelEl.createDiv("top-summary-panel-labels");
    } else {
      this.labelsEl.empty();
    }
    const lower = this.searchKeyword.toLowerCase();
    const visibleTags = lower ? this.props.tags.filter((t2) => t2.toLowerCase().includes(lower)) : this.props.tags;
    visibleTags.forEach((tag) => {
      const labelEl = this.labelsEl.createSpan("top-summary-panel-label");
      labelEl.textContent = tag;
      if (this.panelSelected.includes(tag)) {
        labelEl.addClass("selected");
      }
      labelEl.addEventListener("click", () => {
        this.toggleTagSelection(tag);
      });
    });
    if (this.labelsEl) {
      this.labelsEl.scrollTop = prevScrollTop;
    }
    let actionsEl = this.panelEl.querySelector(".top-summary-panel-actions");
    if (!actionsEl) {
      actionsEl = this.panelEl.createDiv("top-summary-panel-actions");
      actionsEl.style.padding = "8px 16px 12px 16px";
      const selectAllBtn = actionsEl.createSpan("panel-btn");
      selectAllBtn.textContent = ((_d = (_c = (init_i18n(), __toCommonJS(i18n_exports))) == null ? void 0 : _c.t) == null ? void 0 : _d.call(_c, "tags.selectAll")) || "\u5168\u9009";
      selectAllBtn.addEventListener("click", () => {
        this.panelSelected = [...this.props.tags];
        this.renderSelectionPanel();
      });
      const deselectAllBtn = actionsEl.createSpan("panel-btn");
      deselectAllBtn.textContent = ((_f = (_e = (init_i18n(), __toCommonJS(i18n_exports))) == null ? void 0 : _e.t) == null ? void 0 : _f.call(_e, "tags.deselectAll")) || "\u53D6\u6D88\u5168\u9009";
      deselectAllBtn.addEventListener("click", () => {
        this.panelSelected = [];
        this.renderSelectionPanel();
      });
    }
  }
  toggleTagSelection(tag) {
    if (this.panelSelected.includes(tag)) {
      this.panelSelected = this.panelSelected.filter((t2) => t2 !== tag);
    } else {
      this.panelSelected.push(tag);
    }
    this.renderSelectionPanel();
  }
  confirmSelection() {
    this.props.onTagClick(this.panelSelected);
    this.hideSelectionPanel();
  }
  // 更新标签
  updateTags(tags, selectedTags) {
    this.props.tags = tags;
    this.props.selectedTags = selectedTags;
    this.render();
  }
};

// components/TopSummary.ts
init_i18n();
var TopSummary = class {
  constructor(containerEl, props) {
    this.containerEl = containerEl;
    this.props = props;
  }
  formatDateLocal(date) {
    const d = new Date(date.getTime() - date.getTimezoneOffset() * 6e4);
    return d.toISOString().split("T")[0];
  }
  render() {
    this.containerEl.empty();
    this.containerEl.addClass("top-summary");
    this.renderNumbers();
    this.renderLabels();
    this.renderChart();
  }
  renderNumbers() {
    const numbersEl = this.containerEl.createDiv("top-summary-numbers");
    const dailyEl = numbersEl.createDiv("top-summary-daily");
    const dateEl = dailyEl.createDiv("top-summary-date");
    dateEl.textContent = this.formatDateLocal(this.props.selectedDate || new Date());
    dateEl.addClass("clickable");
    dateEl.addEventListener("click", () => {
      this.showDatePicker();
    });
    const dailyCostEl = dailyEl.createDiv("top-summary-dailycost");
    dailyCostEl.textContent = `${this.getCurrencySymbol()}${this.props.totalDailyCost.toFixed(2)}`;
    const summaryEl = numbersEl.createDiv("top-summary-summary");
    const totalEl = summaryEl.createDiv("top-summary-total");
    const totalMetaEl = totalEl.createSpan("top-summary-meta");
    totalMetaEl.textContent = t("top.total");
    const totalCostEl = totalEl.createSpan("top-summary-totalcost");
    totalCostEl.textContent = `${this.getCurrencySymbol()}${this.props.totalCost.toLocaleString()}`;
    const recycleEl = summaryEl.createDiv("top-summary-total");
    const recycleMetaEl = recycleEl.createSpan("top-summary-meta");
    recycleMetaEl.textContent = t("top.recycle");
    const recycleCostEl = recycleEl.createSpan("top-summary-totalcost");
    recycleCostEl.textContent = `${this.getCurrencySymbol()}${this.props.totalRecycle.toLocaleString()}`;
  }
  renderLabels() {
    const labelsEl = this.containerEl.createDiv("top-summary-labels");
    const panelProps = {
      tags: this.props.tags,
      selectedTags: this.props.selectedTags,
      onTagClick: this.props.onTagClick,
      maxHeight: "48px"
    };
    this.tagPanelComponent = new TagPanel(labelsEl, panelProps);
    this.tagPanelComponent.render();
  }
  getCurrencySymbol() {
    return t("currency.symbol");
  }
  renderChart() {
    const chartEl = this.containerEl.createDiv("top-summary-chart");
    const canvas = chartEl.createEl("canvas");
    canvas.id = "trend-canvas";
    canvas.width = 100;
    canvas.height = 20;
    this.renderChartCanvas(canvas);
  }
  renderChartCanvas(canvas) {
    if (this.props.trendPoints.length < 2)
      return;
    const ctx = canvas.getContext("2d");
    if (!ctx)
      return;
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
    const width = canvas.width;
    const height = canvas.height;
    const pad = 0;
    const values = this.props.trendPoints.map((p) => p.value);
    const minValue = Math.min(...values);
    const maxValue = Math.max(...values);
    const range = maxValue - minValue;
    const useLogScale = range > 100;
    const getX = (i) => pad + (width - 2 * pad) * i / (this.props.trendPoints.length - 1);
    const getY = (v) => {
      if (useLogScale) {
        const logValue = Math.log(v + 1);
        const logMin = Math.log(minValue + 1);
        const logMax = Math.log(maxValue + 1);
        return height - pad - (logValue - logMin) / Math.max(logMax - logMin, 0.5) * (height - 2 * pad);
      } else {
        return height - pad - (v - minValue) / Math.max(range, 0.5) * (height - 2 * pad);
      }
    };
    const getColorByValue = (v) => {
      const logValue = Math.log(v + 1);
      const logMin = Math.log(minValue + 1);
      const logMax = Math.log(maxValue + 1);
      if (logMax === logMin)
        return "rgb(255,255,0)";
      const t2 = (logValue - logMin) / (logMax - logMin);
      if (t2 <= 0.5) {
        const r = Math.round(2 * t2 * 255);
        return `rgb(${r},255,0)`;
      } else {
        const g = Math.round((1 - 2 * (t2 - 0.5)) * 255);
        return `rgb(255,${g},0)`;
      }
    };
    ctx.clearRect(0, 0, width, height);
    ctx.lineWidth = 1;
    for (let i = 0; i < this.props.trendPoints.length - 1; i++) {
      const p1 = this.props.trendPoints[i];
      const p2 = this.props.trendPoints[i + 1];
      const x1 = getX(i);
      const y1 = getY(p1.value);
      const x2 = getX(i + 1);
      const y2 = getY(p2.value);
      ctx.beginPath();
      ctx.strokeStyle = getColorByValue(p1.value);
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.stroke();
    }
    let selectedXToDraw = null;
    if (this.props.selectedX !== null && this.props.selectedX !== void 0) {
      selectedXToDraw = this.props.selectedX;
    } else if (this.props.selectedDate) {
      try {
        const times = this.props.trendPoints.map((p) => p.date.getTime());
        const minTime = Math.min(...times);
        const maxTime = Math.max(...times);
        const cur = this.props.selectedDate.getTime();
        const denom = Math.max(maxTime - minTime, 1);
        const ratio = (cur - minTime) / denom;
        selectedXToDraw = pad + (width - 2 * pad) * Math.min(Math.max(ratio, 0), 1);
      } catch (_) {
        selectedXToDraw = null;
      }
    }
    if (selectedXToDraw !== null && selectedXToDraw !== void 0) {
      ctx.beginPath();
      ctx.strokeStyle = "#FFD600";
      ctx.lineWidth = 1;
      ctx.moveTo(selectedXToDraw, 0);
      ctx.lineTo(selectedXToDraw, height);
      ctx.stroke();
    }
    if (!canvas._lac_click_bound) {
      canvas._lac_click_bound = true;
      canvas.addEventListener("click", (ev) => {
        var _a;
        const x = (_a = ev.offsetX) != null ? _a : ev.clientX - canvas.getBoundingClientRect().left;
        const usableWidth = Math.max(width - 2 * pad, 1);
        const ratio = Math.min(Math.max((x - pad) / usableWidth, 0), 1);
        const idx = Math.round(ratio * (this.props.trendPoints.length - 1));
        const clampedIdx = Math.min(Math.max(idx, 0), this.props.trendPoints.length - 1);
        const pickedDate = this.props.trendPoints[clampedIdx].date;
        this.updateSelection(x, pickedDate);
        if (this.props.onDatePick) {
          this.props.onDatePick(this.formatDateLocal(pickedDate));
        }
        if (this.props.onChartSelect) {
          this.props.onChartSelect(x);
        }
      });
    }
  }
  // 更新图表数据
  updateChart(trendPoints) {
    this.props.trendPoints = trendPoints;
    const canvas = this.containerEl.querySelector("#trend-canvas");
    if (canvas) {
      this.renderChartCanvas(canvas);
    }
  }
  // 更新选中状态
  updateSelection(selectedX, selectedDate) {
    this.props.selectedX = selectedX;
    if (selectedDate) {
      this.props.selectedDate = selectedDate;
      const dateLabel = this.containerEl.querySelector(".top-summary-date");
      if (dateLabel) {
        dateLabel.textContent = this.formatDateLocal(selectedDate);
      }
    }
    const canvas = this.containerEl.querySelector("#trend-canvas");
    if (canvas) {
      this.renderChartCanvas(canvas);
    }
  }
  // 只更新数字（不重绘图表数据）
  updateNumbers(totalDailyCost, totalCost, totalRecycle) {
    this.props.totalDailyCost = totalDailyCost;
    this.props.totalCost = totalCost;
    this.props.totalRecycle = totalRecycle;
    const daily = this.containerEl.querySelector(".top-summary-dailycost");
    if (daily)
      daily.textContent = `${this.getCurrencySymbol()}${totalDailyCost.toFixed(2)}`;
    const totals = this.containerEl.querySelectorAll(".top-summary-totalcost");
    if (totals && totals.length > 0) {
      const totalEl = totals[0];
      if (totalEl)
        totalEl.textContent = `${this.getCurrencySymbol()}${totalCost.toLocaleString()}`;
      const recycleEl = totals[1];
      if (recycleEl)
        recycleEl.textContent = `${this.getCurrencySymbol()}${totalRecycle.toLocaleString()}`;
    }
  }
  // 显示日期选择器
  showDatePicker() {
    const mask = document.createElement("div");
    mask.className = "date-picker-mask";
    const picker = document.createElement("div");
    picker.className = "date-picker-modal";
    const content = document.createElement("div");
    content.className = "date-picker-content";
    const title = document.createElement("div");
    title.className = "date-picker-title";
    title.textContent = t("date.pick");
    const wheelContainer = document.createElement("div");
    wheelContainer.className = "date-wheel-container";
    const currentDate = this.props.selectedDate || new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1;
    const currentDay = currentDate.getDate();
    const yearColumn = this.createWheelColumn(t("date.year"), this.generateYears(currentYear), currentYear, (year) => {
      this.updateDaysColumn(dayColumn, year, monthColumn.selectedValue);
    }, false);
    const monthColumn = this.createWheelColumn(t("date.month"), this.generateMonths(), currentMonth, (month) => {
      this.updateDaysColumn(dayColumn, yearColumn.selectedValue, month);
    }, true);
    const dayColumn = this.createWheelColumn(t("date.day"), this.generateDays(currentYear, currentMonth), currentDay, void 0, true);
    wheelContainer.appendChild(yearColumn.element);
    wheelContainer.appendChild(monthColumn.element);
    wheelContainer.appendChild(dayColumn.element);
    const actions = document.createElement("div");
    actions.className = "date-picker-actions";
    const cancelBtn = document.createElement("button");
    cancelBtn.className = "date-picker-btn date-picker-btn-cancel";
    cancelBtn.textContent = t("common.cancel");
    const confirmBtn = document.createElement("button");
    confirmBtn.className = "date-picker-btn date-picker-btn-confirm";
    confirmBtn.textContent = t("common.confirm");
    actions.appendChild(cancelBtn);
    actions.appendChild(confirmBtn);
    content.appendChild(title);
    content.appendChild(wheelContainer);
    content.appendChild(actions);
    picker.appendChild(content);
    mask.appendChild(picker);
    document.body.appendChild(mask);
    const closePicker = () => {
      document.body.removeChild(mask);
    };
    mask.addEventListener("click", (e) => {
      if (e.target === mask) {
        closePicker();
      }
    });
    cancelBtn.addEventListener("click", closePicker);
    confirmBtn.addEventListener("click", () => {
      const year = yearColumn.selectedValue;
      const month = monthColumn.selectedValue;
      const day = dayColumn.selectedValue;
      const selectedDateStr = `${year}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;
      if (this.props.onDatePick) {
        this.props.onDatePick(selectedDateStr);
      }
      closePicker();
    });
  }
  // 生成年份数组
  generateYears(currentYear) {
    const minYear = this.props.minYear || currentYear - 5;
    const maxYear = this.props.maxYear || currentYear + 5;
    const years = [];
    for (let i = minYear; i <= maxYear; i++) {
      years.push(i);
    }
    return years;
  }
  // 生成月份数组
  generateMonths() {
    return Array.from({ length: 12 }, (_, i) => i + 1);
  }
  // 生成日期数组
  generateDays(year, month) {
    const daysInMonth = new Date(year, month, 0).getDate();
    return Array.from({ length: daysInMonth }, (_, i) => i + 1);
  }
  // 创建滚轮列
  createWheelColumn(suffix, values, selectedValue, onChange, isInfinite = false) {
    const column = document.createElement("div");
    column.className = "date-wheel-column";
    const container = document.createElement("div");
    container.className = "date-wheel-items";
    let selectedIndex = values.indexOf(selectedValue);
    let currentSelectedValue = selectedValue;
    const api = { element: column, selectedValue: currentSelectedValue };
    const itemHeight = 40;
    if (isInfinite) {
      const repeatCount = 5;
      const totalItems = values.length * repeatCount;
      const middleGroupIndex = 2;
      const initialScrollTop = middleGroupIndex * values.length * itemHeight + selectedIndex * itemHeight;
      for (let repeat = 0; repeat < repeatCount; repeat++) {
        values.forEach((value, index) => {
          const item = document.createElement("div");
          item.className = "date-wheel-item";
          item.textContent = `${value.toString().padStart(2, "0")}${suffix}`;
          item.dataset.value = value.toString();
          item.dataset.index = (repeat * values.length + index).toString();
          item.dataset.realValue = value.toString();
          container.appendChild(item);
        });
      }
      container.style.height = `${totalItems * itemHeight}px`;
      const initialItemIndex = middleGroupIndex * values.length + selectedIndex;
      const items = Array.from(container.querySelectorAll(".date-wheel-item"));
      if (items[initialItemIndex]) {
        items.forEach((el, idx) => el.classList.toggle("selected", idx === initialItemIndex));
      }
      requestAnimationFrame(() => {
        container.scrollTop = initialScrollTop;
      });
      let isScrolling = false;
      container.addEventListener("scroll", () => {
        if (isScrolling)
          return;
        const scrollTop = container.scrollTop;
        const currentIndex = Math.round(scrollTop / itemHeight);
        const realIndex = (currentIndex % values.length + values.length) % values.length;
        const realValue = values[realIndex];
        container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
          const itemRealIndex = index % values.length;
          item.classList.toggle("selected", itemRealIndex === realIndex);
        });
        selectedIndex = realIndex;
        currentSelectedValue = realValue;
        api.selectedValue = realValue;
        if (onChange) {
          onChange(currentSelectedValue);
        }
        const maxScrollTop = (repeatCount - 1) * values.length * itemHeight;
        const minScrollTop = values.length * itemHeight;
        if (scrollTop >= maxScrollTop) {
          isScrolling = true;
          const offset = scrollTop - maxScrollTop;
          container.scrollTop = values.length * itemHeight + offset;
          setTimeout(() => {
            isScrolling = false;
          }, 50);
        } else if (scrollTop <= 0) {
          isScrolling = true;
          const offset = scrollTop;
          container.scrollTop = (repeatCount - 2) * values.length * itemHeight + offset;
          setTimeout(() => {
            isScrolling = false;
          }, 50);
        }
      });
      container.addEventListener("click", (ev) => {
        const target = ev.target;
        const itemEl = target && target.closest ? target.closest(".date-wheel-item") : null;
        if (!itemEl)
          return;
        const clickedIndex = Number(itemEl.dataset.index || "0");
        const realIndex = (clickedIndex % values.length + values.length) % values.length;
        const middleIndex = middleGroupIndex * values.length + realIndex;
        container.scrollTop = middleIndex * itemHeight;
        selectedIndex = realIndex;
        currentSelectedValue = values[realIndex];
        api.selectedValue = currentSelectedValue;
        if (onChange)
          onChange(currentSelectedValue);
      });
    } else {
      values.forEach((value, index) => {
        const item = document.createElement("div");
        item.className = "date-wheel-item";
        item.textContent = `${value.toString().padStart(2, "0")}${suffix}`;
        item.dataset.value = value.toString();
        item.dataset.index = index.toString();
        if (value === currentSelectedValue) {
          item.classList.add("selected");
        }
        container.appendChild(item);
      });
      container.addEventListener("scroll", () => {
        const scrollTop = container.scrollTop;
        const newIndex = Math.round(scrollTop / itemHeight);
        if (newIndex !== selectedIndex && newIndex >= 0 && newIndex < values.length) {
          container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
            item.classList.toggle("selected", index === newIndex);
          });
          selectedIndex = newIndex;
          currentSelectedValue = values[newIndex];
          api.selectedValue = currentSelectedValue;
          if (onChange) {
            onChange(currentSelectedValue);
          }
        }
      });
      container.addEventListener("click", (ev) => {
        const target = ev.target;
        const itemEl = target && target.closest ? target.closest(".date-wheel-item") : null;
        if (!itemEl)
          return;
        const idx = Number(itemEl.dataset.index || "0");
        container.querySelectorAll(".date-wheel-item").forEach((el, i) => {
          el.classList.toggle("selected", i === idx);
        });
        container.scrollTop = idx * itemHeight;
        selectedIndex = idx;
        currentSelectedValue = values[idx];
        api.selectedValue = currentSelectedValue;
        if (onChange)
          onChange(currentSelectedValue);
      });
      setTimeout(() => {
        container.scrollTop = selectedIndex * itemHeight;
      }, 0);
    }
    column.appendChild(container);
    return api;
  }
  // 更新日期列
  updateDaysColumn(dayColumn, year, month) {
    const container = dayColumn.element.querySelector(".date-wheel-items");
    const currentDay = dayColumn.selectedValue;
    const newDays = this.generateDays(year, month);
    if (container.empty) {
      container.empty();
    } else {
      while (container.firstChild)
        container.removeChild(container.firstChild);
    }
    const maxDay = Math.max(...newDays);
    const selectedDay = Math.min(currentDay, maxDay);
    const selectedIndex = newDays.indexOf(selectedDay);
    const itemHeight = 40;
    const repeatCount = 5;
    const totalItems = newDays.length * repeatCount;
    const middleGroupIndex = 2;
    const initialScrollTop = middleGroupIndex * newDays.length * itemHeight + selectedIndex * itemHeight;
    for (let repeat = 0; repeat < repeatCount; repeat++) {
      newDays.forEach((day, index) => {
        const item = document.createElement("div");
        item.className = "date-wheel-item";
        item.textContent = `${day.toString().padStart(2, "0")}\u65E5`;
        item.dataset.value = day.toString();
        item.dataset.index = (repeat * newDays.length + index).toString();
        item.dataset.realValue = day.toString();
        container.appendChild(item);
      });
    }
    container.style.height = `${totalItems * itemHeight}px`;
    const initialItemIndexDay = middleGroupIndex * newDays.length + selectedIndex;
    const dayItems = Array.from(container.querySelectorAll(".date-wheel-item"));
    if (dayItems[initialItemIndexDay]) {
      dayItems.forEach((el, idx) => el.classList.toggle("selected", idx === initialItemIndexDay));
    }
    requestAnimationFrame(() => {
      container.scrollTop = initialScrollTop;
    });
    dayColumn.selectedValue = selectedDay;
    let isScrolling = false;
    container.addEventListener("scroll", () => {
      if (isScrolling)
        return;
      const scrollTop = container.scrollTop;
      const currentIndex = Math.round(scrollTop / itemHeight);
      const realIndex = currentIndex % newDays.length;
      const realValue = newDays[realIndex];
      container.querySelectorAll(".date-wheel-item").forEach((item, index) => {
        const itemRealIndex = index % newDays.length;
        item.classList.toggle("selected", itemRealIndex === realIndex);
      });
      dayColumn.selectedValue = realValue;
      const maxScrollTop = (repeatCount - 1) * newDays.length * itemHeight;
      const minScrollTop = newDays.length * itemHeight;
      if (scrollTop >= maxScrollTop) {
        isScrolling = true;
        const offset = scrollTop - maxScrollTop;
        container.scrollTop = newDays.length * itemHeight + offset;
        setTimeout(() => {
          isScrolling = false;
        }, 50);
      } else if (scrollTop <= 0) {
        isScrolling = true;
        const offset = scrollTop;
        container.scrollTop = (repeatCount - 2) * newDays.length * itemHeight + offset;
        setTimeout(() => {
          isScrolling = false;
        }, 50);
      }
    });
  }
};

// components/AssetManagerView.ts
init_i18n();
var AssetManagerView = class extends import_obsidian3.ItemView {
  constructor(leaf, assetRepository, filePath) {
    super(leaf);
    this.assets = [];
    // 当前选择的日期
    this.selectedTags = [];
    // 顶部统计下方的按钮卡片
    this.searchQuery = "";
    this.sortMode = "none";
    this.assetRepository = assetRepository;
    this.filePath = filePath;
    this.selectedDate = new Date();
  }
  getViewType() {
    return "lac-costset-view";
  }
  getDisplayText() {
    return "LaC.CostSet";
  }
  getIcon() {
    return "package";
  }
  async onOpen() {
    var _a, _b;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("page-root");
    this.injectHeaderFixStyles();
    try {
      const plugin = (_b = (_a = this.app.plugins) == null ? void 0 : _a.plugins) == null ? void 0 : _b["lac-costset"];
      if (plugin && plugin.settings && plugin.settings.defaultSort) {
        this.sortMode = plugin.settings.defaultSort;
      }
    } catch (_) {
    }
    if (this.filePath) {
      this.useFile(this.filePath);
      return;
    }
    const hint = containerEl.createDiv();
    hint.style.padding = "16px";
    hint.style.opacity = "0.8";
    hint.textContent = t("view.hint.openFromMenu");
    return;
  }
  async onClose() {
    const { containerEl } = this;
    containerEl.empty();
    try {
      this.closeExistingSortMenu();
    } catch (_) {
    }
    ["lac-costset-actionbar-styles", "lac-costset-header-styles"].forEach((id) => {
      const el = document.getElementById(id);
      if (el && el.parentElement)
        el.parentElement.removeChild(el);
    });
  }
  async useFile(filePath) {
    const plugin = this.app.plugins.plugins["lac-costset"];
    if (plugin) {
      plugin.assetRepository = new AssetRepository(this.app, filePath);
      this.assetRepository = plugin.assetRepository;
      this.loadAssets();
    }
  }
  async loadAssets() {
    this.assets = await this.assetRepository.loadAll();
    this.renderAssets();
  }
  showFileSelector() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: t("view.selectRoot.title") });
    containerEl.createEl("p", { text: t("view.selectRoot.desc") });
    const files = this.app.vault.getMarkdownFiles();
    const fileList = containerEl.createDiv("file-list");
    files.forEach((file) => {
      const fileItem = fileList.createDiv("file-item");
      fileItem.createEl("div", { text: file.path });
      fileItem.addEventListener("click", async () => {
        const plugin = this.app.plugins.plugins["lac-costset"];
        if (plugin) {
          plugin.assetRepository = new AssetRepository(this.app, file.path);
          this.assetRepository = plugin.assetRepository;
          this.loadAssets();
        }
      });
    });
  }
  renderAssets() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("page-root");
    this.renderTopSummary(containerEl);
    this.renderActionBar(containerEl);
    const assetsContainer = containerEl.createDiv("assets-container");
    this.renderAssetCards(assetsContainer);
  }
  renderAssetCards(assetsContainer) {
    assetsContainer.empty();
    if (this.assets.length === 0) {
      assetsContainer.createEl("p", { text: t("view.empty") });
      return;
    }
    const calcDate = this.selectedDate || new Date();
    let visibleAssets = this.assets.filter((a) => a.activeFrom <= calcDate);
    if (this.selectedTags.length > 0) {
      visibleAssets = visibleAssets.filter((a) => {
        var _a;
        return (_a = a.tags) == null ? void 0 : _a.some((t2) => this.selectedTags.includes(t2));
      });
    }
    if (this.searchQuery && this.searchQuery.trim()) {
      const q = this.searchQuery.trim().toLowerCase();
      visibleAssets = visibleAssets.filter((a) => {
        const nameHit = (a.name || "").toLowerCase().includes(q);
        const tagHit = (a.tags || []).some((t2) => (t2 || "").toLowerCase().includes(q));
        return nameHit || tagHit;
      });
    }
    if (this.sortMode !== "none") {
      visibleAssets = [...visibleAssets].sort((a, b) => {
        var _a, _b, _c, _d;
        if (this.sortMode === "dailyDesc") {
          const aCost = a.getDailyCost(calcDate);
          const bCost = b.getDailyCost(calcDate);
          return bCost - aCost;
        }
        if (this.sortMode === "priceDesc") {
          return Number(b.price || 0) - Number(a.price || 0);
        }
        if (this.sortMode === "dateDesc") {
          const at = ((_b = (_a = a.activeFrom) == null ? void 0 : _a.getTime) == null ? void 0 : _b.call(_a)) || 0;
          const bt = ((_d = (_c = b.activeFrom) == null ? void 0 : _c.getTime) == null ? void 0 : _d.call(_c)) || 0;
          return bt - at;
        }
        return 0;
      });
    }
    visibleAssets.forEach((asset) => {
      const isExpired = !!(asset.activeTo && asset.activeTo <= calcDate);
      const endText = isExpired ? asset.activeTo.toISOString().split("T")[0] : t("view.toNow");
      const assetEl = assetsContainer.createDiv("asset-card");
      if (isExpired)
        assetEl.addClass("asset-card--expired");
      if (asset.hidden)
        assetEl.addClass("hidden");
      const infoEl = assetEl.createDiv("asset-info");
      const titleEl = infoEl.createDiv("asset-title");
      titleEl.textContent = `${asset.icon} ${asset.name}`;
      const dateEl = infoEl.createDiv("asset-date");
      dateEl.textContent = `${t("view.usedDays", { days: asset.getUsageDays(calcDate) })} (${asset.activeFrom.toISOString().split("T")[0]} ~ ${asset.activeTo ? endText : t("view.toNow")})`;
      const labelsScrollEl = infoEl.createDiv("asset-labels-scroll");
      (asset.tags || []).forEach((tag) => {
        const tagEl = labelsScrollEl.createSpan("tag");
        tagEl.textContent = tag;
      });
      const costsEl = assetEl.createDiv("asset-costs");
      const costsLine = costsEl.createDiv("asset-costs-line");
      const priceMeta = costsLine.createDiv("asset-price");
      priceMeta.textContent = `${t("view.daily")}\xA0`;
      const dailyCost = costsLine.createDiv("asset-dailycost");
      dailyCost.textContent = this.getCurrencySymbol() + `${asset.getDailyCost(calcDate).toFixed(2)}`;
      const priceLine = costsEl.createDiv("asset-price");
      priceLine.textContent = `${t("view.price")} ${this.getCurrencySymbol()}${asset.price}`;
      const recycleLine = costsEl.createDiv("asset-price");
      recycleLine.textContent = `${t("view.recyclePrice")} ${this.getCurrencySymbol()}${asset.recyclePrice}`;
      let didLongPress = false;
      let isTouchActive = false;
      let lastTouchTime = 0;
      let lastPointerType = "";
      assetEl.addEventListener("click", (e) => {
        if (didLongPress) {
          didLongPress = false;
          e.preventDefault();
          e.stopPropagation();
          return;
        }
        new AssetFormModal(this.app, this.assetRepository, asset, () => this.loadAssets()).open();
      });
      let pressTimer = null;
      const startPress = (ev) => {
        if (ev && "button" in ev && typeof ev.button === "number" && ev.button !== 0)
          return;
        if (pressTimer)
          window.clearTimeout(pressTimer);
        pressTimer = window.setTimeout(() => {
          didLongPress = true;
          asset.hidden = !asset.hidden;
          assetEl.classList.toggle("hidden", asset.hidden);
          this.refreshTopNumbersOnly();
        }, 500);
      };
      const cancelPress = () => {
        if (pressTimer) {
          window.clearTimeout(pressTimer);
          pressTimer = null;
        }
      };
      assetEl.addEventListener("mousedown", startPress);
      assetEl.addEventListener("pointerdown", (pev) => {
        lastPointerType = pev.pointerType || "";
      });
      const onTouchStart = (ev) => {
        isTouchActive = true;
        lastTouchTime = Date.now();
        startPress(ev);
      };
      assetEl.addEventListener("touchstart", onTouchStart, { passive: true });
      assetEl.addEventListener("mouseup", cancelPress);
      assetEl.addEventListener("mouseleave", cancelPress);
      const onTouchEnd = () => {
        isTouchActive = false;
        cancelPress();
      };
      assetEl.addEventListener("touchend", onTouchEnd);
      assetEl.addEventListener("touchcancel", onTouchEnd);
    });
  }
  // 仅刷新顶部数字 (排除 hidden 资产)，不刷新图表、不重建列表
  refreshTopNumbersOnly() {
    if (!this.topSummaryComponent)
      return;
    const calcDate = this.selectedDate || new Date();
    const activeAssets = this.assets.filter((a) => a.isActive(calcDate) && !a.hidden);
    const filteredActiveAssets = this.applyTagFilter(activeAssets);
    const totalCost = filteredActiveAssets.reduce((sum, a) => sum + a.price, 0);
    const totalRecycle = filteredActiveAssets.reduce((sum, a) => sum + a.recyclePrice, 0);
    const totalDailyCost = filteredActiveAssets.reduce((sum, a) => sum + a.getDailyCost(calcDate), 0);
    this.topSummaryComponent.updateNumbers(totalDailyCost, totalCost, totalRecycle);
  }
  // 顶部统计下方的操作条（搜索 / 排序 / 添加）
  renderActionBar(containerEl) {
    this.injectActionBarStyles();
    const bar = containerEl.createDiv("lac-actionbar-card");
    this.actionBarEl = bar;
    const backBtn = bar.createDiv({ cls: "lac-icon-btn back", attr: { title: t("view.back") } });
    backBtn.appendChild(this.svgBack());
    backBtn.addEventListener("click", (e) => {
      e.preventDefault();
      try {
        this.leaf.detach();
      } catch (_) {
      }
    });
    const searchWrap = bar.createDiv("lac-actionbar-search");
    const searchIconBtn = searchWrap.createEl("button", { cls: "lac-icon-btn search-icon", attr: { type: "button", "aria-label": t("view.search.aria") } });
    searchIconBtn.appendChild(this.svgSearch());
    const searchInput = searchWrap.createEl("input", { attr: { type: "text", placeholder: t("view.search.placeholder") } });
    if (this.searchQuery)
      searchInput.value = this.searchQuery;
    searchIconBtn.addEventListener("click", () => searchInput.focus());
    searchInput.addEventListener("input", () => {
      this.searchQuery = searchInput.value || "";
      this.refreshAssetListOnly();
    });
    const actions = bar.createDiv("lac-actionbar-actions");
    const sortBtn = actions.createDiv({ cls: "lac-icon-btn sort", attr: { title: t("view.sort.title") } });
    sortBtn.appendChild(this.svgSort());
    const applySortBtnState = () => {
      sortBtn.classList.toggle("active", this.sortMode !== "none");
      sortBtn.setAttr("data-mode", this.sortMode);
      sortBtn.setAttr("aria-pressed", String(this.sortMode !== "none"));
      const title = this.sortMode === "dailyDesc" ? t("view.sort.title.dailyDesc") : this.sortMode === "priceDesc" ? t("view.sort.title.priceDesc") : this.sortMode === "dateDesc" ? t("view.sort.title.dateDesc") : t("view.sort.title");
      sortBtn.setAttr("title", title);
    };
    applySortBtnState();
    sortBtn.addEventListener("click", (e) => {
      e.preventDefault();
      this.openSortMenu(sortBtn, (mode) => {
        this.sortMode = mode;
        applySortBtnState();
        this.refreshAssetListOnly();
      });
    });
    const addBtn = actions.createDiv({ cls: "lac-icon-btn add", attr: { title: t("view.add") } });
    addBtn.appendChild(this.svgPlus());
    addBtn.addEventListener("click", () => {
      new AssetFormModal(this.app, this.assetRepository, void 0, () => this.loadAssets()).open();
    });
  }
  refreshAssetListOnly() {
    const { containerEl } = this;
    const listEl = containerEl.querySelector(".assets-container");
    if (listEl) {
      listEl.remove();
      const newList = containerEl.createDiv("assets-container");
      this.renderAssetCards(newList);
    }
  }
  injectActionBarStyles() {
    const STYLE_ID = "lac-costset-actionbar-styles";
    if (document.getElementById(STYLE_ID))
      return;
    const style = document.createElement("style");
    style.id = STYLE_ID;
    style.textContent = `
			/* \u6309\u94AE\u5361\u7247\uFF1A\u4E0E top-summary / asset-card \u540C\u98CE\u683C\uFF0C\u4EC5\u9AD8\u5EA6\u66F4\u5C0F */
			.lac-actionbar-card { display: flex; align-items: center; justify-content: space-between; gap: 10px; padding: 6px 10px; margin: 0px 14px 8px; border-radius: 8px; background: #23262F; box-shadow: 0 2px 8px rgba(0,0,0,0.18); }
			.lac-actionbar-search { position: relative; flex: 1; min-width: 0; }
			.lac-actionbar-search input { width: 100%; height: 30px; padding: 4px 8px 4px 30px; border-radius: 8px; border: 1px solid #3A3D46; background: #2A2D36; color: #F5F6FA; font-size: 13px; line-height: 20px; }
			.lac-actionbar-search input::placeholder { color: #A0A3B1; }
			.lac-actionbar-search .search-icon { position: absolute; left: 8px; top: 50%; transform: translateY(-50%); width: 16px; height: 16px; padding: 0; border: none; background: transparent; color: #C9CBD3; }
			.lac-actionbar-actions { display: flex; align-items: center; gap: 8px; }
			.lac-icon-btn { width: 32px; height: 32px; display: inline-flex; align-items: center; justify-content: center; border-radius: 8px; border: none !important; outline: none !important; background: transparent !important; box-shadow: none !important; color: #C9CBD3; cursor: pointer; }
			.lac-icon-btn.add { color: #f3e700; }
			.lac-icon-btn.back { display: inline-flex; color: #C9CBD3; }
			.lac-icon-btn:hover { filter: brightness(1.05); }
			.lac-icon-btn svg { width: 20px; height: 20px; display:block; }
			.lac-icon-btn svg * { stroke: currentColor !important; fill: none !important; stroke-width: 2 !important; }
			.lac-icon-btn.active { background: #2F3139; }
			/* \u9690\u85CF\u6001\u6837\u5F0F\uFF08\u5BF9\u9F50 costsetapp\uFF09 */
			.asset-card.hidden { opacity: 0.3; filter: grayscale(0.5); }
            /* \u6392\u5E8F\u83DC\u5355 */
            .lac-sort-menu { position: fixed; min-width: 160px; background: #23262F; color: #F5F6FA; border-radius: 10px; overflow: hidden; box-shadow: 0 8px 18px rgba(0,0,0,0.35); border: 1px solid #3A3D46; z-index: 9999; }
            .lac-sort-menu .menu-item { padding: 10px 14px; cursor: pointer; border-top: 1px solid #2E313A; transition: background 120ms ease, color 120ms ease; }
            .lac-sort-menu .menu-item:first-child { border-top: none; }
            .lac-sort-menu .menu-item:hover { background: rgba(255, 214, 0, 0.12); color: inherit; }
            .lac-sort-menu .menu-item.active { color: #FFD700; }

			/* \u5C0F\u4E8E 720px \u65F6\u7D27\u51D1\u5E03\u5C40 */
			@media (max-width: 720px) {
				.lac-actionbar-card { gap: 8px; }
				.lac-actionbar-search input { padding-left: 30px; }
			}
		`;
    document.head.appendChild(style);
  }
  injectHeaderFixStyles() {
    const STYLE_ID = "lac-costset-header-styles";
    if (document.getElementById(STYLE_ID))
      return;
    const style = document.createElement("style");
    style.id = STYLE_ID;
    style.textContent = `
			/* \u4EC5\u4F5C\u7528\u4E8E\u672C\u89C6\u56FE\uFF1A\u4FDD\u8BC1\u7A84\u5BBD\u65F6\u4E5F\u663E\u793A\u6807\u9898\u680F\u83DC\u5355/\u8FD4\u56DE\u533A\u57DF */
			.workspace-leaf[data-type="lac-costset-view"] .view-header {
				display: flex !important;
				align-items: center !important;
				flex-wrap: nowrap !important;
				visibility: visible !important;
				height: auto !important;
				min-height: 36px !important;
			}
			.workspace-leaf[data-type="lac-costset-view"] .view-header-title-container { min-width: 0 !important; display: flex !important; }
			.workspace-leaf[data-type="lac-costset-view"] .view-header-title { flex: 1 1 auto !important; min-width: 0 !important; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
			.workspace-leaf[data-type="lac-costset-view"] .view-header .view-actions { flex: 0 0 auto !important; display: inline-flex !important; gap: 6px; visibility: visible !important; }
			@media (max-width: 720px) {
				.workspace-leaf[data-type="lac-costset-view"] .view-header-title { max-width: 45%; }
			}
			@media (max-width: 560px) {
				.workspace-leaf[data-type="lac-costset-view"] .view-header-title { max-width: 35%; }
			}
		`;
    document.head.appendChild(style);
  }
  openSortMenu(anchorEl, onSelect) {
    this.closeExistingSortMenu();
    const rect = anchorEl.getBoundingClientRect();
    const menu = document.createElement("div");
    menu.className = "lac-sort-menu";
    const buildItem = (label, value) => {
      const item = document.createElement("div");
      item.className = "menu-item" + (this.sortMode === value ? " active" : "");
      item.textContent = label;
      item.addEventListener("click", (ev) => {
        ev.stopPropagation();
        const next = this.sortMode === value ? "none" : value;
        onSelect(next);
        this.closeExistingSortMenu();
      });
      return item;
    };
    menu.appendChild(buildItem(t("view.sort.menu.dailyDesc"), "dailyDesc"));
    menu.appendChild(buildItem(t("view.sort.menu.priceDesc"), "priceDesc"));
    menu.appendChild(buildItem(t("view.sort.menu.dateDesc"), "dateDesc"));
    document.body.appendChild(menu);
    const top = rect.bottom + 6;
    const left = Math.min(Math.max(8, rect.left), window.innerWidth - 180);
    menu.style.top = `${top}px`;
    menu.style.left = `${left}px`;
    const onDocClick = (ev) => {
      if (!menu.contains(ev.target))
        this.closeExistingSortMenu();
    };
    const onEsc = (ev) => {
      if (ev.key === "Escape")
        this.closeExistingSortMenu();
    };
    this.registerDomEvent(document, "mousedown", onDocClick, { once: true });
    this.registerDomEvent(document, "keydown", onEsc, { once: true });
    menu._cleanup = void 0;
  }
  // 让视图可被 setViewState 恢复与导航：保存/应用状态
  getState() {
    return { filePath: this.filePath };
  }
  async setState(state, result) {
    const nextPath = state == null ? void 0 : state.filePath;
    if (nextPath && nextPath !== this.filePath) {
      this.filePath = nextPath;
      await this.useFile(nextPath);
      return;
    }
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("page-root");
    const hint = containerEl.createDiv();
    hint.style.padding = "16px";
    hint.style.opacity = "0.8";
    hint.textContent = "\u4ECE\u6587\u4EF6\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u9009\u62E9 \u201C\u7528 LaC.CostSet \u6253\u5F00\u201D\u3002";
  }
  closeExistingSortMenu() {
    const existing = document.querySelector(".lac-sort-menu");
    if (existing) {
      const cleanup = existing._cleanup;
      if (cleanup)
        cleanup();
      existing.remove();
    }
  }
  svgSearch() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    circle.setAttribute("cx", "11");
    circle.setAttribute("cy", "11");
    circle.setAttribute("r", "7");
    circle.setAttribute("stroke", "currentColor");
    circle.setAttribute("stroke-width", "2");
    svg.appendChild(circle);
    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
    line.setAttribute("x1", "20");
    line.setAttribute("y1", "20");
    line.setAttribute("x2", "16.65");
    line.setAttribute("y2", "16.65");
    line.setAttribute("stroke", "currentColor");
    line.setAttribute("stroke-width", "2");
    line.setAttribute("stroke-linecap", "round");
    svg.appendChild(line);
    return svg;
  }
  svgPlus() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", "M12 5v14M5 12h14");
    path.setAttribute("stroke", "currentColor");
    path.setAttribute("stroke-width", "2");
    path.setAttribute("stroke-linecap", "round");
    svg.appendChild(path);
    return svg;
  }
  svgSort() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    const p1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    p1.setAttribute("d", "M8 9l4-4 4 4");
    p1.setAttribute("stroke", "currentColor");
    p1.setAttribute("stroke-width", "2");
    p1.setAttribute("stroke-linecap", "round");
    p1.setAttribute("stroke-linejoin", "round");
    svg.appendChild(p1);
    const p2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    p2.setAttribute("d", "M16 15l-4 4-4-4");
    p2.setAttribute("stroke", "currentColor");
    p2.setAttribute("stroke-width", "2");
    p2.setAttribute("stroke-linecap", "round");
    p2.setAttribute("stroke-linejoin", "round");
    svg.appendChild(p2);
    return svg;
  }
  svgBack() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", "M15 18l-6-6 6-6");
    path.setAttribute("stroke", "currentColor");
    path.setAttribute("stroke-width", "2");
    path.setAttribute("stroke-linecap", "round");
    path.setAttribute("stroke-linejoin", "round");
    svg.appendChild(path);
    return svg;
  }
  renderTopSummary(containerEl) {
    const calcDate = this.selectedDate || new Date();
    const activeAssets = this.assets.filter((asset) => asset.isActive(calcDate) && !asset.hidden);
    const filteredActiveAssets = this.applyTagFilter(activeAssets);
    const totalCost = filteredActiveAssets.reduce((sum, asset) => sum + asset.price, 0);
    const totalRecycle = filteredActiveAssets.reduce((sum, asset) => sum + asset.recyclePrice, 0);
    const totalDailyCost = filteredActiveAssets.reduce((sum, asset) => sum + asset.getDailyCost(calcDate), 0);
    const allTags = /* @__PURE__ */ new Set();
    this.assets.forEach((asset) => {
      (asset.tags || []).forEach((tag) => allTags.add(tag));
    });
    const collator = new Intl.Collator("zh", { sensitivity: "base", numeric: true });
    const tagsArray = Array.from(allTags).sort((a, b) => collator.compare(a, b));
    const currentYear = new Date().getFullYear();
    const maxYear = currentYear + 7;
    let minYear = currentYear;
    if (this.assets.length > 0) {
      const earliestYear = Math.min(...this.assets.map((asset) => asset.activeFrom.getFullYear()));
      minYear = earliestYear;
    }
    const trendPoints = this.calcTrendPoints(filteredActiveAssets, 30);
    console.log("\u6E32\u67D3\u9876\u90E8\u7EDF\u8BA1\u533A\u57DF:", {
      activeAssets: activeAssets.length,
      totalCost,
      totalRecycle,
      totalDailyCost,
      tagsArray,
      yearRange: { minYear, maxYear }
    });
    const topSummaryEl = containerEl.createDiv();
    const topSummaryProps = {
      totalDailyCost,
      totalCost,
      totalRecycle,
      tags: tagsArray,
      selectedTags: this.selectedTags,
      onTagClick: (tag) => {
        if (Array.isArray(tag)) {
          this.selectedTags = [...new Set(tag)];
        } else {
          if (this.selectedTags.includes(tag)) {
            this.selectedTags = this.selectedTags.filter((t2) => t2 !== tag);
          } else {
            this.selectedTags = [...this.selectedTags, tag];
          }
        }
        this.renderAssets();
      },
      trendPoints,
      selectedDate: this.selectedDate,
      onChartSelect: (x) => {
        console.log("\u56FE\u8868\u9009\u62E9:", x);
      },
      onChartWidth: (w) => {
        console.log("\u56FE\u8868\u5BBD\u5EA6:", w);
      },
      onDatePick: (dateStr) => {
        console.log("\u65E5\u671F\u9009\u62E9:", dateStr);
        const selectedDate = new Date(dateStr);
        this.selectedDate = selectedDate;
        if (this.topSummaryComponent) {
          this.topSummaryComponent.updateSelection(null, selectedDate);
          const calcDate2 = selectedDate;
          const activeAssets2 = this.assets.filter((asset) => asset.isActive(calcDate2) && !asset.hidden);
          const filteredActiveAssets2 = this.applyTagFilter(activeAssets2);
          const totalCost2 = filteredActiveAssets2.reduce((sum, asset) => sum + asset.price, 0);
          const totalRecycle2 = filteredActiveAssets2.reduce((sum, asset) => sum + asset.recyclePrice, 0);
          const totalDailyCost2 = filteredActiveAssets2.reduce((sum, asset) => sum + asset.getDailyCost(calcDate2), 0);
          this.topSummaryComponent.updateNumbers(totalDailyCost2, totalCost2, totalRecycle2);
        }
        const { containerEl: containerEl2 } = this;
        const listEl = containerEl2.querySelector(".assets-container");
        if (listEl) {
          listEl.remove();
          const newList = containerEl2.createDiv("assets-container");
          this.renderAssetCards(newList);
        } else {
          this.renderAssets();
        }
      },
      minYear,
      maxYear
    };
    this.topSummaryComponent = new TopSummary(topSummaryEl, topSummaryProps);
    this.topSummaryComponent.render();
    this.renderChartWithProgressiveRefinement(filteredActiveAssets);
    console.log("\u9876\u90E8\u7EDF\u8BA1\u533A\u57DF\u5DF2\u521B\u5EFA:", topSummaryEl);
  }
  getCurrencySymbol() {
    return t("currency.symbol");
  }
  // 渐进式细化渲染（参考costsetapp实现）
  renderChartWithProgressiveRefinement(assets) {
    if (assets.length === 0)
      return;
    let maxActiveTo = 0;
    assets.forEach((a) => {
      const to = a.activeTo;
      if (to) {
        const t2 = to.getTime();
        if (t2 && t2 > maxActiveTo)
          maxActiveTo = t2;
      }
    });
    const now = new Date();
    const maxDate = maxActiveTo && maxActiveTo > now.getTime() ? new Date(maxActiveTo) : now;
    const initialPoints = this.calcTrendPoints(assets, 30, void 0, maxDate);
    if (this.topSummaryComponent) {
      this.topSummaryComponent.updateChart(initialPoints);
    }
    setTimeout(async () => {
      const segPromises = [];
      for (let i = 0; i < initialPoints.length - 1; i++) {
        segPromises.push(
          Promise.resolve(this.calcTrendPoints(assets, 30, initialPoints[i].date, initialPoints[i + 1].date)).then((segPoints) => {
            if (i > 0)
              return segPoints.slice(1);
            return segPoints;
          })
        );
      }
      const segResults = await Promise.all(segPromises);
      const finePoints = segResults.flat();
      if (this.topSummaryComponent) {
        this.topSummaryComponent.updateChart(finePoints);
      }
    }, 500);
  }
  // 将标签筛选应用到给定资产集
  applyTagFilter(input) {
    if (!this.selectedTags || this.selectedTags.length === 0)
      return input;
    return input.filter((a) => {
      var _a;
      return (_a = a.tags) == null ? void 0 : _a.some((t2) => this.selectedTags.includes(t2));
    });
  }
  calcTrendPoints(assets, count, fromDate, toDate) {
    if (assets.length === 0)
      return [];
    const now = new Date();
    const minDate = fromDate || new Date(Math.min(...assets.map((a) => a.activeFrom.getTime())));
    const maxActiveTo = Math.max(...assets.map((a) => {
      const to = a.activeTo;
      if (to) {
        const t2 = to.getTime();
        if (!isNaN(t2))
          return t2;
      }
      return now.getTime();
    }));
    const maxDate = toDate || new Date(maxActiveTo);
    const points = [];
    for (let i = 0; i < count; i++) {
      const t2 = minDate.getTime() + (maxDate.getTime() - minDate.getTime()) * i / (count - 1);
      const date = new Date(t2);
      let totalCost = 0;
      assets.forEach((a) => {
        const cost = this.calcDailyCost(a.price, a.recyclePrice, a.activeFrom, a.activeTo, date);
        if (isFinite(cost))
          totalCost += cost;
      });
      points.push({ date, value: totalCost });
    }
    return points;
  }
  // 计算日均成本（参考costsetapp算法）
  calcDailyCost(price, recycle, from, to, now) {
    if (!from)
      return 0;
    const days = Math.floor((now.getTime() - from.getTime()) / 864e5) + 1;
    if (!to || to > now) {
      recycle = 0;
    }
    if (!isFinite(days) || days <= 0)
      return 0;
    const result = (Number(price) - Number(recycle || 0)) / days;
    return isFinite(result) ? result : 0;
  }
};

// components/settings/LacCostSetSettingTab.ts
var import_obsidian4 = require("obsidian");
init_i18n();
var LacCostSetSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: t("settings.title") });
    containerEl.createEl("p", { text: t("settings.guide.1"), cls: "setting-item-description" });
    const entryExample = t("settings.entry.example");
    containerEl.createEl("pre", { text: entryExample, cls: "setting-item-description" });
    containerEl.createEl("p", { text: t("settings.asset.desc"), cls: "setting-item-description" });
    const assetExample = t("settings.asset.example");
    containerEl.createEl("pre", { text: assetExample, cls: "setting-item-description" });
    containerEl.createEl("p", { text: t("settings.usage"), cls: "setting-item-description" });
    new import_obsidian4.Setting(containerEl).setName(t("settings.entryFile.name")).setDesc(t("settings.entryFile.desc")).addText((text) => text.setPlaceholder("LaC/CostSet/costset.md").setValue(this.plugin.settings.entryFile || "LaC/CostSet/costset.md").onChange(async (value) => {
      this.plugin.settings.entryFile = (value == null ? void 0 : value.trim()) || "LaC/CostSet/costset.md";
      await this.plugin.saveSettings();
      this.plugin.assetRepository = new AssetRepository(this.app, this.plugin.settings.entryFile);
    }));
    new import_obsidian4.Setting(containerEl).setName(t("settings.contextMenu.name")).setDesc(t("settings.contextMenu.desc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableContextMenu).onChange(async (value) => {
      this.plugin.settings.enableContextMenu = !!value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName(t("settings.defaultSort.name")).setDesc(t("settings.defaultSort.desc")).addDropdown((drop) => {
      drop.addOption("none", t("settings.defaultSort.option.none"));
      drop.addOption("dailyDesc", t("settings.defaultSort.option.dailyDesc"));
      drop.addOption("priceDesc", t("settings.defaultSort.option.priceDesc"));
      drop.addOption("dateDesc", t("settings.defaultSort.option.dateDesc"));
      drop.setValue(this.plugin.settings.defaultSort || "none");
      drop.onChange(async (value) => {
        const v = value;
        this.plugin.settings.defaultSort = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName(t("settings.defaultIcon.name")).setDesc(t("settings.defaultIcon.desc")).addText((text) => {
      const sanitizeToFirstEmoji = (input) => {
        const m = (input || "").match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/);
        return m ? m[0] : "";
      };
      text.setPlaceholder(t("settings.defaultIcon.placeholder")).setValue(this.plugin.settings.defaultIcon).onChange(async (value) => {
        const first = sanitizeToFirstEmoji(value);
        if (text.inputEl && text.inputEl.value !== first) {
          text.inputEl.value = first;
        }
        this.plugin.settings.defaultIcon = first;
        await this.plugin.saveSettings();
      });
      const inputEl = text.inputEl;
      if (inputEl) {
        inputEl.addEventListener("paste", () => {
          setTimeout(() => {
            const first = sanitizeToFirstEmoji(inputEl.value || "");
            if (inputEl.value !== first)
              inputEl.value = first;
            this.plugin.settings.defaultIcon = first;
            this.plugin.saveSettings();
          }, 0);
        });
      }
    });
    new import_obsidian4.Setting(containerEl).setName(t("settings.locale.name")).setDesc(t("settings.locale.desc")).addDropdown((drop) => {
      drop.addOption("auto", t("settings.locale.option.auto"));
      drop.addOption("zh", "\u4E2D\u6587");
      drop.addOption("en", "English");
      drop.setValue(this.plugin.settings.locale || "auto");
      drop.onChange(async (value) => {
        this.plugin.settings.locale = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};

// main.ts
var LacCostSetPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    setLocale(this.settings.locale || "auto");
    this.assetRepository = new AssetRepository(this.app, this.settings.entryFile || "LaC/CostSet/costset.md");
    this.registerView("lac-costset-view", (leaf) => new AssetManagerView(leaf, this.assetRepository));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (!this.settings.enableContextMenu)
          return;
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          menu.addItem((item) => {
            item.setTitle(t("menu.openWith")).setIcon("package").onClick(() => {
              const leaf = this.app.workspace.getLeaf("tab");
              leaf.setViewState({
                type: "lac-costset-view",
                state: { filePath: file.path },
                active: true
              });
              this.app.workspace.revealLeaf(leaf);
            });
          });
        }
      })
    );
    this.addCommand({
      id: "open-lac-costset",
      name: t("command.open"),
      callback: async () => {
        const entryPath = this.settings.entryFile || "LaC/CostSet/costset.md";
        const ensureFolderExists = async (folderPath) => {
          const folder = this.app.vault.getAbstractFileByPath(folderPath);
          if (!folder) {
            await this.app.vault.createFolder(folderPath);
          }
        };
        const entryFile = this.app.vault.getAbstractFileByPath(entryPath);
        if (!entryFile) {
          const parts = entryPath.split("/");
          const folderPath = parts.slice(0, -1).join("/") || "";
          if (folderPath)
            await ensureFolderExists(folderPath);
          const sampleEntry = `# LaC.CostSet \u5165\u53E3

# \u4EE5\u4E0B\u4E3A\u5165\u53E3\u5143\u6570\u636E\uFF08TOML\uFF09
# \u8981\u6C42\uFF1Atype = "root" \u4E14 renders \u5305\u542B "costset"

type = "root"
renders = ["costset"]

# \u4EE5\u4E0B\u4E3A\u793A\u4F8B\u8D44\u4EA7\uFF0C\u60A8\u53EF\u4EE5\u5220\u9664\u5E76\u66FF\u6362\u4E3A\u81EA\u5DF1\u7684\u8D44\u4EA7\uFF1A

[[\u6F14\u793A-\u952E\u76D8]]
[[\u6F14\u793A-\u8033\u673A]]
[[\u6F14\u793A-\u8DEF\u7531\u5668]]
`;
          await this.app.vault.create(entryPath, sampleEntry);
          const makeAssetToml = (name, icon, price, from, to, recycle, tags) => {
            const lines = [];
            lines.push(`name = "${name}"`);
            lines.push("");
            lines.push("[style]");
            lines.push(`icon = "${icon}"`);
            lines.push("");
            lines.push("[detail]");
            lines.push(`price = ${price}`);
            lines.push(`active_from = "${from}"`);
            lines.push(`active_to = "${to || ""}"`);
            lines.push(`recycle_price = ${recycle != null ? recycle : 0}`);
            lines.push(`tags = [${(tags || []).map((t2) => `"${t2}"`).join(", ")}]`);
            lines.push("");
            return lines.join("\n");
          };
          const assetsFolder = folderPath || "LaC/CostSet";
          await ensureFolderExists(assetsFolder);
          const assetDefs = [
            { id: "\u6F14\u793A-\u952E\u76D8", icon: "\u2328\uFE0F", price: 399, from: "2024-01-01", to: "", recycle: 0, tags: ["\u6570\u7801", "\u952E\u76D8"] },
            { id: "\u6F14\u793A-\u8033\u673A", icon: "\u{1F3A7}", price: 599, from: "2024-03-15", to: "", recycle: 0, tags: ["\u6570\u7801", "\u8033\u673A"] },
            { id: "\u6F14\u793A-\u8DEF\u7531\u5668", icon: "\u{1F4F6}", price: 329, from: "2023-11-20", to: "", recycle: 50, tags: ["\u7F51\u7EDC"] }
          ];
          for (const a of assetDefs) {
            const filePath = `${assetsFolder}/${a.id}.md`;
            const exists = this.app.vault.getAbstractFileByPath(filePath);
            if (!exists) {
              await this.app.vault.create(filePath, makeAssetToml(a.id, a.icon, a.price, a.from, a.to, a.recycle, a.tags));
            }
          }
        }
        let invalid = false;
        try {
          const f = this.app.vault.getAbstractFileByPath(entryPath);
          if (f && f instanceof import_obsidian5.TFile) {
            const raw = await this.app.vault.read(f);
            const tomlCandidate = raw.replace(/\[\[([^\]]+)\]\]/g, (_m, p1) => `"${String(p1).trim()}"`);
            const hasTomlKv = /(^|\n)\s*[A-Za-z0-9_.]+\s*=\s*[^\n]+/m.test(tomlCandidate);
            const typeMatch = tomlCandidate.match(/(^|\n)\s*type\s*=\s*"([^"]*)"/m);
            const typeVal = (typeMatch == null ? void 0 : typeMatch[2]) || "";
            const rendersMatch = tomlCandidate.match(/(^|\n)\s*renders\s*=\s*\[([\s\S]*?)\]/m);
            let rendersHasCostset = false;
            if (rendersMatch && rendersMatch[2]) {
              const arrText = rendersMatch[2];
              rendersHasCostset = /\"costset\"/i.test(arrText) || /(^|,|\s)costset(,|\s|$)/i.test(arrText);
            }
            invalid = !hasTomlKv || typeVal !== "root" || !rendersHasCostset;
          } else {
            invalid = true;
          }
        } catch (_) {
          invalid = true;
        }
        if (invalid)
          new import_obsidian5.Notice(t("notice.invalidEntry"));
        this.assetRepository = new AssetRepository(this.app, entryPath);
        const leaf = this.app.workspace.getLeaf("tab");
        await leaf.setViewState({
          type: "lac-costset-view",
          state: { filePath: entryPath },
          active: true
        });
        this.app.workspace.revealLeaf(leaf);
      }
    });
    this.addSettingTab(new LacCostSetSettingTab(this.app, this));
    this.addStatusBarItem().setText("Lac-CostSet");
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    setLocale(this.settings.locale || "auto");
  }
};
//# sourceMappingURL=data:application/json;base64,
